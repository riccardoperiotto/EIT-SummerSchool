function Production(manager, instanceName) {

	/* Begin - EA generated code for StateMachine */

	this.base = new StateMachineContext(this, manager, instanceName, "Production");
	//Initialize Region Variables
	this.m_statemachine = StateEnum.NOSTATE;
	this.m_statemachine_controller = StateEnum.NOSTATE;
	this.m_statemachine_dbv = StateEnum.NOSTATE;
	this.m_statemachine_housing = StateEnum.NOSTATE;
	this.m_statemachine_magnet = StateEnum.NOSTATE;
	this.m_statemachine_springcover = StateEnum.NOSTATE;
	this.m_statemachine_springset = StateEnum.NOSTATE;
	this.m_statemachine_springsetscrew = StateEnum.NOSTATE;
	this.m_statemachine_wv = StateEnum.NOSTATE;		
	this.initialize = function() {
		//Initial for "EventEnum"
		//Initialize for "StateMachineEnum"
		StateMachineEnum.Production_ENUM_STATEMACHINE = "Production_ENUM_STATEMACHINE";
		//Initialize for "StateEnum"
		StateEnum.Production_VIRTUAL_SUBMACHINESTATE = "Production_VIRTUAL_SUBMACHINESTATE";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER = "Production_ENUM_STATEMACHINE_CONTROLLER";
		StateEnum.Production_ENUM_STATEMACHINE_DBV = "Production_ENUM_STATEMACHINE_DBV";
		StateEnum.Production_ENUM_STATEMACHINE_HOUSING = "Production_ENUM_STATEMACHINE_HOUSING";
		StateEnum.Production_ENUM_STATEMACHINE_MAGNET = "Production_ENUM_STATEMACHINE_MAGNET";
		StateEnum.Production_ENUM_STATEMACHINE_PARSING = "Production_ENUM_STATEMACHINE_PARSING";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER = "Production_ENUM_STATEMACHINE_SPRINGCOVER";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET = "Production_ENUM_STATEMACHINE_SPRINGSET";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW = "Production_ENUM_STATEMACHINE_SPRINGSETSCREW";
		StateEnum.Production_ENUM_STATEMACHINE_WAITING = "Production_ENUM_STATEMACHINE_WAITING";
		StateEnum.Production_ENUM_STATEMACHINE_WV = "Production_ENUM_STATEMACHINE_WV";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLFINAL_216 = "Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLFINAL_216";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING = "Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2 = "Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5 = "Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7 = "Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9 = "Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING = "Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE = "Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81 = "Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D = "Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E = "Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I = "Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L = "Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L";
		StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD = "Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD";
		StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45 = "Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45";
		StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING = "Production_ENUM_STATEMACHINE_DBV_DBVREADING";
		StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_A = "Production_ENUM_STATEMACHINE_DBV_DBV_A";
		StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AB = "Production_ENUM_STATEMACHINE_DBV_DBV_AB";
		StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AXBX = "Production_ENUM_STATEMACHINE_DBV_DBV_AXBX";
		StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_B = "Production_ENUM_STATEMACHINE_DBV_DBV_B";
		StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_C = "Production_ENUM_STATEMACHINE_DBV_DBV_C";
		StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGFINAL_56 = "Production_ENUM_STATEMACHINE_HOUSING_HOUSINGFINAL_56";
		StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING = "Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING";
		StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E = "Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E";
		StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI = "Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI";
		StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF = "Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF";
		StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A = "Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A";
		StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA = "Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA";
		StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_106 = "Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_106";
		StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_217 = "Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_217";
		StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12 = "Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12";
		StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING = "Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING";
		StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24 = "Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24";
		StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24 = "Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24";
		StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12 = "Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_87 = "Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_87";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_215 = "Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_215";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING = "Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE = "Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A = "Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN = "Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E = "Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA = "Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF = "Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA = "Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETFINAL_60 = "Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETFINAL_60";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING = "Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A = "Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN = "Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E = "Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H = "Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWFINAL_214 = "Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWFINAL_214";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE = "Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING = "Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A = "Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN = "Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN";
		StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA = "Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA";
		StateEnum.Production_ENUM_STATEMACHINE_WV_WVFINAL_218 = "Production_ENUM_STATEMACHINE_WV_WVFINAL_218";
		StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE = "Production_ENUM_STATEMACHINE_WV_WVROUTE";
		StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING = "Production_ENUM_STATEMACHINE_WV_WVREADING";
		StateEnum.Production_ENUM_STATEMACHINE_WV_WV_STANDARD = "Production_ENUM_STATEMACHINE_WV_WV_STANDARD";
		StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W1 = "Production_ENUM_STATEMACHINE_WV_WV_W1";
		StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W3 = "Production_ENUM_STATEMACHINE_WV_WV_W3";
		//Initialize for "TransitionEnum"
		TransitionEnum.Production_ENUM_CONTROLLER__TO__WV_133 = "Production_ENUM_CONTROLLER__TO__WV_133";
		TransitionEnum.Production_ENUM_WV__TO__CONTROLLER_104 = "Production_ENUM_WV__TO__CONTROLLER_104";
		TransitionEnum.Production_ENUM_SPRINGSET__TO__SPRINGSETSCREW_60 = "Production_ENUM_SPRINGSET__TO__SPRINGSETSCREW_60";
		TransitionEnum.Production_ENUM_WV__TO__MAGNET_102 = "Production_ENUM_WV__TO__MAGNET_102";
		TransitionEnum.Production_ENUM_SPRINGSETSCREW__TO__SPRINGCOVER_80 = "Production_ENUM_SPRINGSETSCREW__TO__SPRINGCOVER_80";
		TransitionEnum.Production_ENUM_MAGNET__TO__WAITING_144 = "Production_ENUM_MAGNET__TO__WAITING_144";
		TransitionEnum.Production_ENUM_WAITING__TO__PARSING_162 = "Production_ENUM_WAITING__TO__PARSING_162";
		TransitionEnum.Production_ENUM_DBV__TO__SPRINGSET_49 = "Production_ENUM_DBV__TO__SPRINGSET_49";
		TransitionEnum.Production_ENUM_PARSING__TO__HOUSING_16 = "Production_ENUM_PARSING__TO__HOUSING_16";
		TransitionEnum.Production_ENUM_INITIAL_18__TO__WAITING_161 = "Production_ENUM_INITIAL_18__TO__WAITING_161";
		TransitionEnum.Production_ENUM_PARSING__TO__WAITING_186 = "Production_ENUM_PARSING__TO__WAITING_186";
		TransitionEnum.Production_ENUM_SPRINGCOVER__TO__WV_85 = "Production_ENUM_SPRINGCOVER__TO__WV_85";
		TransitionEnum.Production_ENUM_CONTROLLER__TO__SPRINGCOVER_134 = "Production_ENUM_CONTROLLER__TO__SPRINGCOVER_134";
		TransitionEnum.Production_ENUM_CONTROLLER__TO__MAGNET_103 = "Production_ENUM_CONTROLLER__TO__MAGNET_103";
		TransitionEnum.Production_ENUM_SPRINGSETSCREW__TO__WV_118 = "Production_ENUM_SPRINGSETSCREW__TO__WV_118";
		TransitionEnum.Production_ENUM_SPRINGCOVER__TO__MAGNET_94 = "Production_ENUM_SPRINGCOVER__TO__MAGNET_94";
		TransitionEnum.Production_ENUM_HOUSING__TO__DBV_50 = "Production_ENUM_HOUSING__TO__DBV_50";
		TransitionEnum.Production_ENUM_SPRINGCOVER__TO__CONTROLLER_105 = "Production_ENUM_SPRINGCOVER__TO__CONTROLLER_105";
		TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING5_179 = "Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING5_179";
		TransitionEnum.Production_ENUM_CONTROLLER_STANDARD__TO__CONTROLLERSPRINGREADING_177 = "Production_ENUM_CONTROLLER_STANDARD__TO__CONTROLLERSPRINGREADING_177";
		TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING7_180 = "Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING7_180";
		TransitionEnum.Production_ENUM_CONTROLLER_D__TO__CONTROLLERSPRINGREADING_172 = "Production_ENUM_CONTROLLER_D__TO__CONTROLLERSPRINGREADING_172";
		TransitionEnum.Production_ENUM_SPRING5__TO__CONTROLLERROUTE_183 = "Production_ENUM_SPRING5__TO__CONTROLLERROUTE_183";
		TransitionEnum.Production_ENUM_CONTROLLERROUTE__TO__CONTROLFINAL_216_165 = "Production_ENUM_CONTROLLERROUTE__TO__CONTROLFINAL_216_165";
		TransitionEnum.Production_ENUM_CONTROLLER_L__TO__CONTROLLERSPRINGREADING_176 = "Production_ENUM_CONTROLLER_L__TO__CONTROLLERSPRINGREADING_176";
		TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_81_127 = "Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_81_127";
		TransitionEnum.Production_ENUM_SPRING7__TO__CONTROLLERROUTE_184 = "Production_ENUM_SPRING7__TO__CONTROLLERROUTE_184";
		TransitionEnum.Production_ENUM_CONTROLLERINITIAL_115__TO__CONTROLLERREADING_101 = "Production_ENUM_CONTROLLERINITIAL_115__TO__CONTROLLERREADING_101";
		TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_E_123 = "Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_E_123";
		TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_D_99 = "Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_D_99";
		TransitionEnum.Production_ENUM_CONTROLLER_I__TO__CONTROLLERSPRINGREADING_174 = "Production_ENUM_CONTROLLER_I__TO__CONTROLLERSPRINGREADING_174";
		TransitionEnum.Production_ENUM_SPRING2__TO__CONTROLLERROUTE_182 = "Production_ENUM_SPRING2__TO__CONTROLLERROUTE_182";
		TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_STANDARD_125 = "Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_STANDARD_125";
		TransitionEnum.Production_ENUM_CONTROLLER_81__TO__CONTROLLERSPRINGREADING_175 = "Production_ENUM_CONTROLLER_81__TO__CONTROLLERSPRINGREADING_175";
		TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING9_181 = "Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING9_181";
		TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_L_126 = "Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_L_126";
		TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_I_124 = "Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_I_124";
		TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING2_178 = "Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING2_178";
		TransitionEnum.Production_ENUM_SPRING9__TO__CONTROLLERROUTE_185 = "Production_ENUM_SPRING9__TO__CONTROLLERROUTE_185";
		TransitionEnum.Production_ENUM_CONTROLLER_E__TO__CONTROLLERSPRINGREADING_173 = "Production_ENUM_CONTROLLER_E__TO__CONTROLLERSPRINGREADING_173";
		TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_B_154 = "Production_ENUM_DBVREADING__TO__DBV_B_154";
		TransitionEnum.Production_ENUM_DBVINITIAL_44__TO__DBVREADING_33 = "Production_ENUM_DBVINITIAL_44__TO__DBVREADING_33";
		TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_C_32 = "Production_ENUM_DBVREADING__TO__DBV_C_32";
		TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_AB_155 = "Production_ENUM_DBVREADING__TO__DBV_AB_155";
		TransitionEnum.Production_ENUM_DBV_B__TO__DBVFINAL_45_28 = "Production_ENUM_DBV_B__TO__DBVFINAL_45_28";
		TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_A_153 = "Production_ENUM_DBVREADING__TO__DBV_A_153";
		TransitionEnum.Production_ENUM_DBV_AXBX__TO__DBVFINAL_45_141 = "Production_ENUM_DBV_AXBX__TO__DBVFINAL_45_141";
		TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_AXBX_109 = "Production_ENUM_DBVREADING__TO__DBV_AXBX_109";
		TransitionEnum.Production_ENUM_DBV_A__TO__DBVFINAL_45_27 = "Production_ENUM_DBV_A__TO__DBVFINAL_45_27";
		TransitionEnum.Production_ENUM_DBV_AB__TO__DBVFINAL_45_29 = "Production_ENUM_DBV_AB__TO__DBVFINAL_45_29";
		TransitionEnum.Production_ENUM_DBV_C__TO__DBVFINAL_45_34 = "Production_ENUM_DBV_C__TO__DBVFINAL_45_34";
		TransitionEnum.Production_ENUM_DBVREADING__TO__DBVFINAL_45_142 = "Production_ENUM_DBVREADING__TO__DBVFINAL_45_142";
		TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_EI_25 = "Production_ENUM_HOUSINGREADING__TO__HOUSING_EI_25";
		TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_HA_22 = "Production_ENUM_HOUSINGREADING__TO__HOUSING_HA_22";
		TransitionEnum.Production_ENUM_HOUSING_EI__TO__HOUSINGFINAL_56_156 = "Production_ENUM_HOUSING_EI__TO__HOUSINGFINAL_56_156";
		TransitionEnum.Production_ENUM_HOUSING_E__TO__HOUSINGFINAL_56_38 = "Production_ENUM_HOUSING_E__TO__HOUSINGFINAL_56_38";
		TransitionEnum.Production_ENUM_HOUSING_HAUNF__TO__HOUSINGFINAL_56_37 = "Production_ENUM_HOUSING_HAUNF__TO__HOUSINGFINAL_56_37";
		TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_HAUNF_23 = "Production_ENUM_HOUSINGREADING__TO__HOUSING_HAUNF_23";
		TransitionEnum.Production_ENUM_HOUSINGINITIAL_17__TO__HOUSINGREADING_9 = "Production_ENUM_HOUSINGINITIAL_17__TO__HOUSINGREADING_9";
		TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_E_24 = "Production_ENUM_HOUSINGREADING__TO__HOUSING_E_24";
		TransitionEnum.Production_ENUM_HOUSING_HA__TO__HOUSINGFINAL_56_36 = "Production_ENUM_HOUSING_HA__TO__HOUSINGFINAL_56_36";
		TransitionEnum.Production_ENUM_HOUSING_A__TO__HOUSINGFINAL_56_35 = "Production_ENUM_HOUSING_A__TO__HOUSINGFINAL_56_35";
		TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_A_19 = "Production_ENUM_HOUSINGREADING__TO__HOUSING_A_19";
		TransitionEnum.Production_ENUM_MAGNET_S12__TO__MAGNETFINAL_217_171 = "Production_ENUM_MAGNET_S12__TO__MAGNETFINAL_217_171";
		TransitionEnum.Production_ENUM_MAGNET_X12__TO__MAGNETFINAL_106_136 = "Production_ENUM_MAGNET_X12__TO__MAGNETFINAL_106_136";
		TransitionEnum.Production_ENUM_MAGNET_G24__TO__MAGNETFINAL_106_92 = "Production_ENUM_MAGNET_G24__TO__MAGNETFINAL_106_92";
		TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_G24_90 = "Production_ENUM_MAGNETREADING__TO__MAGNET_G24_90";
		TransitionEnum.Production_ENUM_MAGNET_G24__TO__MAGNETFINAL_217_168 = "Production_ENUM_MAGNET_G24__TO__MAGNETFINAL_217_168";
		TransitionEnum.Production_ENUM_MAGNETINITIAL_108__TO__MAGNETREADING_96 = "Production_ENUM_MAGNETINITIAL_108__TO__MAGNETREADING_96";
		TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_S12_150 = "Production_ENUM_MAGNETREADING__TO__MAGNET_S12_150";
		TransitionEnum.Production_ENUM_MAGNET_AMP24__TO__MAGNETFINAL_217_170 = "Production_ENUM_MAGNET_AMP24__TO__MAGNETFINAL_217_170";
		TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_AMP24_137 = "Production_ENUM_MAGNETREADING__TO__MAGNET_AMP24_137";
		TransitionEnum.Production_ENUM_MAGNET_S12__TO__MAGNETFINAL_106_151 = "Production_ENUM_MAGNET_S12__TO__MAGNETFINAL_106_151";
		TransitionEnum.Production_ENUM_MAGNET_AMP24__TO__MAGNETFINAL_106_138 = "Production_ENUM_MAGNET_AMP24__TO__MAGNETFINAL_106_138";
		TransitionEnum.Production_ENUM_MAGNET_X12__TO__MAGNETFINAL_217_169 = "Production_ENUM_MAGNET_X12__TO__MAGNETFINAL_217_169";
		TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_X12_135 = "Production_ENUM_MAGNETREADING__TO__MAGNET_X12_135";
		TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNETFINAL_106_139 = "Production_ENUM_MAGNETREADING__TO__MAGNETFINAL_106_139";
		TransitionEnum.Production_ENUM_SPRINGCOVERROUTE__TO__SPRINGCOVERFINAL_215_164 = "Production_ENUM_SPRINGCOVERROUTE__TO__SPRINGCOVERFINAL_215_164";
		TransitionEnum.Production_ENUM_SPRINGCOVER_A__TO__SPRINGCOVERROUTE_86 = "Production_ENUM_SPRINGCOVER_A__TO__SPRINGCOVERROUTE_86";
		TransitionEnum.Production_ENUM_SPRINGCOVER_HA__TO__SPRINGCOVERFINAL_87_74 = "Production_ENUM_SPRINGCOVER_HA__TO__SPRINGCOVERFINAL_87_74";
		TransitionEnum.Production_ENUM_SPRINGCOVER_WA__TO__SPRINGCOVERROUTE_113 = "Production_ENUM_SPRINGCOVER_WA__TO__SPRINGCOVERROUTE_113";
		TransitionEnum.Production_ENUM_SPRINGCOVER_CAN__TO__SPRINGCOVERROUTE_115 = "Production_ENUM_SPRINGCOVER_CAN__TO__SPRINGCOVERROUTE_115";
		TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_HA_71 = "Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_HA_71";
		TransitionEnum.Production_ENUM_SPRINGCOVER_E__TO__SPRINGCOVERROUTE_117 = "Production_ENUM_SPRINGCOVER_E__TO__SPRINGCOVERROUTE_117";
		TransitionEnum.Production_ENUM_SPRINGCOVER_HA__TO__SPRINGCOVERROUTE_87 = "Production_ENUM_SPRINGCOVER_HA__TO__SPRINGCOVERROUTE_87";
		TransitionEnum.Production_ENUM_SPRINGCOVERINITIAL_86__TO__SPRINGCOVERREADING_76 = "Production_ENUM_SPRINGCOVERINITIAL_86__TO__SPRINGCOVERREADING_76";
		TransitionEnum.Production_ENUM_SPRINGCOVER_HUNF__TO__SPRINGCOVERROUTE_111 = "Production_ENUM_SPRINGCOVER_HUNF__TO__SPRINGCOVERROUTE_111";
		TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_CAN_114 = "Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_CAN_114";
		TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_WA_112 = "Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_WA_112";
		TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_HUNF_110 = "Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_HUNF_110";
		TransitionEnum.Production_ENUM_SPRINGCOVER_A__TO__SPRINGCOVERFINAL_87_73 = "Production_ENUM_SPRINGCOVER_A__TO__SPRINGCOVERFINAL_87_73";
		TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_A_70 = "Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_A_70";
		TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_E_116 = "Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_E_116";
		TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_H_43 = "Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_H_43";
		TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_CAN_44 = "Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_CAN_44";
		TransitionEnum.Production_ENUM_SPRINGSET_CAN__TO__SPRINGSETFINAL_60_47 = "Production_ENUM_SPRINGSET_CAN__TO__SPRINGSETFINAL_60_47";
		TransitionEnum.Production_ENUM_SPRINGSET_A__TO__SPRINGSETFINAL_60_122 = "Production_ENUM_SPRINGSET_A__TO__SPRINGSETFINAL_60_122";
		TransitionEnum.Production_ENUM_SPRINGSETINITIAL_59__TO__SPRINGSETREADING_40 = "Production_ENUM_SPRINGSETINITIAL_59__TO__SPRINGSETREADING_40";
		TransitionEnum.Production_ENUM_SPRINGSET_E__TO__SPRINGSETFINAL_60_41 = "Production_ENUM_SPRINGSET_E__TO__SPRINGSETFINAL_60_41";
		TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_A_121 = "Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_A_121";
		TransitionEnum.Production_ENUM_SPRINGSET_H__TO__SPRINGSETFINAL_60_46 = "Production_ENUM_SPRINGSET_H__TO__SPRINGSETFINAL_60_46";
		TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_E_42 = "Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_E_42";
		TransitionEnum.Production_ENUM_SPRINGSETSCREW_WA__TO__SPRINGSETSCREWROUTE_78 = "Production_ENUM_SPRINGSETSCREW_WA__TO__SPRINGSETSCREWROUTE_78";
		TransitionEnum.Production_ENUM_SPRINGSETSCREW_A__TO__SPRINGSETSCREWROUTE_77 = "Production_ENUM_SPRINGSETSCREW_A__TO__SPRINGSETSCREWROUTE_77";
		TransitionEnum.Production_ENUM_SPRINGSETSCREWROUTE__TO__SPRINGSETSCREWFINAL_214_163 = "Production_ENUM_SPRINGSETSCREWROUTE__TO__SPRINGSETSCREWFINAL_214_163";
		TransitionEnum.Production_ENUM_SPRINGSETSCREW_CAN__TO__SPRINGSETSCREWROUTE_79 = "Production_ENUM_SPRINGSETSCREW_CAN__TO__SPRINGSETSCREWROUTE_79";
		TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_CAN_147 = "Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_CAN_147";
		TransitionEnum.Production_ENUM_SPRINGSETSCREWINITIAL_69__TO__SPRINGSETSCREWREADING_59 = "Production_ENUM_SPRINGSETSCREWINITIAL_69__TO__SPRINGSETSCREWREADING_59";
		TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_A_145 = "Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_A_145";
		TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_WA_146 = "Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_WA_146";
		TransitionEnum.Production_ENUM_WVREADING__TO__WV_W3_82 = "Production_ENUM_WVREADING__TO__WV_W3_82";
		TransitionEnum.Production_ENUM_WVREADING__TO__WVROUTE_140 = "Production_ENUM_WVREADING__TO__WVROUTE_140";
		TransitionEnum.Production_ENUM_WV_W3__TO__WVROUTE_84 = "Production_ENUM_WV_W3__TO__WVROUTE_84";
		TransitionEnum.Production_ENUM_INITIALWV_107__TO__WVREADING_95 = "Production_ENUM_INITIALWV_107__TO__WVREADING_95";
		TransitionEnum.Production_ENUM_WVROUTE__TO__WVFINAL_218_167 = "Production_ENUM_WVROUTE__TO__WVFINAL_218_167";
		TransitionEnum.Production_ENUM_WV_W1__TO__WVROUTE_120 = "Production_ENUM_WV_W1__TO__WVROUTE_120";
		TransitionEnum.Production_ENUM_WVREADING__TO__WV_STANDARD_81 = "Production_ENUM_WVREADING__TO__WV_STANDARD_81";
		TransitionEnum.Production_ENUM_WV_STANDARD__TO__WVROUTE_83 = "Production_ENUM_WV_STANDARD__TO__WVROUTE_83";
		TransitionEnum.Production_ENUM_WVREADING__TO__WV_W1_119 = "Production_ENUM_WVREADING__TO__WV_W1_119";
		//Initialize for "EntryEnum"
		EntryEnum.Production_ENUM_STATEMACHINE_INITIAL_18 = "Production_ENUM_STATEMACHINE_INITIAL_18";
		EntryEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERINITIAL_115 = "Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERINITIAL_115";
		EntryEnum.Production_ENUM_STATEMACHINE_DBV_DBVINITIAL_44 = "Production_ENUM_STATEMACHINE_DBV_DBVINITIAL_44";
		EntryEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGINITIAL_17 = "Production_ENUM_STATEMACHINE_HOUSING_HOUSINGINITIAL_17";
		EntryEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETINITIAL_108 = "Production_ENUM_STATEMACHINE_MAGNET_MAGNETINITIAL_108";
		EntryEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERINITIAL_86 = "Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERINITIAL_86";
		EntryEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETINITIAL_59 = "Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETINITIAL_59";
		EntryEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWINITIAL_69 = "Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWINITIAL_69";
		EntryEnum.Production_ENUM_STATEMACHINE_WV_INITIALWV_107 = "Production_ENUM_STATEMACHINE_WV_INITIALWV_107";
		
		//StringTable statemachineList
		stringTable.statemachineList.push(new StateMachineDictionaryNode(StateMachineEnum.Production_ENUM_STATEMACHINE, "Production_StateMachine", ""));
	
		//StringTable stateList
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_VIRTUAL_SUBMACHINESTATE, "Production_VIRTUAL_SUBMACHINESTATE", ""));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, "Production_StateMachine_Controller", "{D19DD79F-31FA-45af-A54E-22E1BBFE25D9}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_DBV, "Production_StateMachine_DBV", "{DAD191C6-7106-407d-967A-15A4BE83B324}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_HOUSING, "Production_StateMachine_Housing", "{39FC9875-C548-4ba0-A2A9-9F56FA362910}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_MAGNET, "Production_StateMachine_Magnet", "{FA16CF6D-F043-483c-A26B-77FAB3951856}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_PARSING, "Production_StateMachine_Parsing", "{C854EB91-0C68-4553-95BF-AFB3B91C93E7}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, "Production_StateMachine_SpringCover", "{6374206D-CDAD-4ea1-B77B-6DE4C77F9B81}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET, "Production_StateMachine_SpringSet", "{0143477F-80E6-4179-BFC5-89DD13A07E42}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW, "Production_StateMachine_SpringSetScrew", "{5A397BE7-3E8B-4400-B0E5-BDBDD94CC4F1}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_WAITING, "Production_StateMachine_Waiting", "{6F52F236-BAC2-4693-8C6B-E0EADB401275}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_WV, "Production_StateMachine_WV", "{D161EFA7-A3AF-459d-AD12-3966DAD80768}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLFINAL_216, "Production_StateMachine_Controller_ControlFinal_216", "{2D383E6B-FF0F-41f9-A2C7-57FB33E990A7}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, "Production_StateMachine_Controller_ControllerSpringReading", "{6861AAFE-0B73-4835-B2B6-5000D1B782D0}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2, "Production_StateMachine_Controller_Spring2", "{378CA5DF-E3E4-4b95-B38D-F3F40AA5DFAE}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5, "Production_StateMachine_Controller_Spring5", "{19D0F56D-770D-40f1-B2E0-167ACB91B21E}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7, "Production_StateMachine_Controller_Spring7", "{5B0F5E9B-B323-4763-B1A6-36DDD9065927}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9, "Production_StateMachine_Controller_Spring9", "{CE7F88E4-F663-49cd-AF18-35619C2CF7B4}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING, "Production_StateMachine_Controller_ControllerReading", "{6EC8A8D2-ED42-4f20-B339-47B0A659AA64}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE, "Production_StateMachine_Controller_ControllerRoute", "{2227AD79-0CAB-406a-824B-09080995959D}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81, "Production_StateMachine_Controller_Controller_81", "{604FA1ED-D60E-4c74-9E78-CD1D3A2488D0}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D, "Production_StateMachine_Controller_Controller_D", "{11552E73-64FD-434c-8871-E489173B90A1}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E, "Production_StateMachine_Controller_Controller_E", "{DF278C30-CB76-41d5-852D-DC895CCF242F}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I, "Production_StateMachine_Controller_Controller_I", "{00EFBFDF-5FAA-448c-A9B2-C8C7F6A615F9}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L, "Production_StateMachine_Controller_Controller_L", "{8AA5411E-D744-41d1-8A89-C5B78252C560}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD, "Production_StateMachine_Controller_Controller_standard", "{2AF13145-920E-4ecd-8DF8-5C535420094A}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45, "Production_StateMachine_DBV_DBVFinal_45", "{F7F49924-C7F9-4a14-8D6E-CAED26E4F56C}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING, "Production_StateMachine_DBV_DBVReading", "{2C0741A3-E903-4b47-BFA7-84A66960D431}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_A, "Production_StateMachine_DBV_DBV_A", "{56BCBC78-6AFF-4bc8-B118-FBE1B43DAE23}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AB, "Production_StateMachine_DBV_DBV_AB", "{D500CAB7-42D6-4042-ABA1-38FD42CB3C99}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AXBX, "Production_StateMachine_DBV_DBV_AxBx", "{65C92C46-B0BF-4cc7-8049-D6B6A310B7E3}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_B, "Production_StateMachine_DBV_DBV_B", "{AA1E2032-7CFA-422f-8B1D-BA7EAC426AB2}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_C, "Production_StateMachine_DBV_DBV_C", "{D4395393-CFE3-4f80-BFEB-84710BE0C2B6}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGFINAL_56, "Production_StateMachine_Housing_HousingFinal_56", "{E73A14BD-255A-40a4-9CEC-FB2B209CEECC}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING, "Production_StateMachine_Housing_HousingReading", "{BC223CBF-4BCB-4a4f-B59B-9DF14ABD3764}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E, "Production_StateMachine_Housing_Housing_E", "{482CCFD4-4C77-4088-BF77-5BC3D1502160}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI, "Production_StateMachine_Housing_Housing_EI", "{62BADA54-A2B0-4a17-A84C-626EFCD3F677}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF, "Production_StateMachine_Housing_Housing_HAUNF", "{44D0A4DA-99C8-47e9-80C0-3DC7DFBAA917}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A, "Production_StateMachine_Housing_Housing_A", "{24102AE0-168C-47ff-8399-D04197FD448C}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA, "Production_StateMachine_Housing_Housing_HA", "{D4EE7032-E231-4e84-B060-F14872158CE1}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_106, "Production_StateMachine_Magnet_MagnetFinal_106", "{E82DADE9-11E5-4d8d-866F-38CBB4CA50E2}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_217, "Production_StateMachine_Magnet_MagnetFinal_217", "{26349773-49B2-402b-A8DA-D1B9635CBF8D}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12, "Production_StateMachine_Magnet_Magnet_S12", "{133AC034-127E-4b02-8DBE-E5C97AA6333C}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING, "Production_StateMachine_Magnet_MagnetReading", "{EA605AD6-40FB-48ab-9AC3-D4AB0417C96E}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24, "Production_StateMachine_Magnet_Magnet_AMP24", "{7BA6BA02-7896-455a-90AF-FEA1B26EC898}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24, "Production_StateMachine_Magnet_Magnet_G24", "{81F94DA4-7AAB-40f4-B1F6-D1CBC2410C10}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12, "Production_StateMachine_Magnet_Magnet_X12", "{7A0E53A1-B909-4c7b-A736-3AC913586EEA}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_87, "Production_StateMachine_SpringCover_SpringCoverFinal_87", "{B82F67F5-38E3-4d14-BD57-EB27C2364A63}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_215, "Production_StateMachine_SpringCover_SpringCoverFinal_215", "{5DC2172E-1CDE-4770-AA5B-C0C86856440A}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING, "Production_StateMachine_SpringCover_SpringCoverReading", "{BC67AF18-C727-43c3-949D-A24BAFFB7E6C}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE, "Production_StateMachine_SpringCover_SpringCoverRoute", "{3E66F300-9FC4-483f-A858-C0DA52CAE8C1}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A, "Production_StateMachine_SpringCover_SpringCover_A", "{BFA19907-F95A-45e0-B8B4-8440DA996E72}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN, "Production_StateMachine_SpringCover_SpringCover_CAN", "{C4D4D64F-22A0-414c-93EE-75D6149FFA06}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E, "Production_StateMachine_SpringCover_SpringCover_E", "{464ADAA7-4D7B-4606-8209-26CBE8E22CB3}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA, "Production_StateMachine_SpringCover_SpringCover_HA", "{50DF5B92-DB6B-4542-93C9-FEB56FC1344E}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF, "Production_StateMachine_SpringCover_SpringCover_HUNF", "{A0EAA07B-F0B0-477e-9BEA-2CF53A91273D}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA, "Production_StateMachine_SpringCover_SpringCover_WA", "{1EF14BB8-04E7-4753-9039-C376EEBC4456}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETFINAL_60, "Production_StateMachine_SpringSet_SpringSetFinal_60", "{DF3376CF-88FD-425b-9DFB-24CBAB41F80B}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING, "Production_StateMachine_SpringSet_SpringSetReading", "{2D54AEB9-85B0-41a3-9187-57B4BF7987C6}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A, "Production_StateMachine_SpringSet_SpringSet_A", "{730D74B4-E94A-4b33-8696-679D04F9A7C6}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN, "Production_StateMachine_SpringSet_SpringSet_CAN", "{06F627EE-3946-4609-A6AF-52BD67F7F7F9}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E, "Production_StateMachine_SpringSet_SpringSet_E", "{CEBD37F8-5201-4efa-BA12-EBEF4B0D8E73}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H, "Production_StateMachine_SpringSet_SpringSet_H", "{A5F37F30-B98D-4f99-8064-DCEBA2C8A121}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWFINAL_214, "Production_StateMachine_SpringSetScrew_SpringSetScrewFinal_214", "{FAF56F33-92A3-4aa8-AB5D-60423B7FCE00}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE, "Production_StateMachine_SpringSetScrew_SpringSetScrewRoute", "{3CFBB9D0-C0A3-423a-AFFB-357B9165C68C}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING, "Production_StateMachine_SpringSetScrew_SpringSetScrewReading", "{7363B43C-A92F-40d8-8D14-ECBA32A4DD16}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A, "Production_StateMachine_SpringSetScrew_SpringSetScrew_A", "{68272D1B-18BA-48ad-8783-4EE7E94CC2C6}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN, "Production_StateMachine_SpringSetScrew_SpringSetScrew_CAN", "{971D84F2-CAF5-4cac-B742-A19A4D5F9FD8}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA, "Production_StateMachine_SpringSetScrew_SpringSetScrew_WA", "{17088FB7-53CB-4270-B922-30006301968A}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_WV_WVFINAL_218, "Production_StateMachine_WV_WVFinal_218", "{E5F45A22-1D6F-4d8f-945D-ECBD047A4816}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE, "Production_StateMachine_WV_WVRoute", "{B7556394-83A6-4547-8924-B3D7676E436F}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING, "Production_StateMachine_WV_WVReading", "{2BD71F70-0E13-4a41-9ADC-018EC043277D}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_STANDARD, "Production_StateMachine_WV_WV_standard", "{5D92E587-A5F9-4ee1-B50B-E4518237613F}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W1, "Production_StateMachine_WV_WV_W1", "{BFC1ACAB-7402-4b35-9702-70E04E207CF0}"));
		stringTable.stateList.push(new StateDictionaryNode(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W3, "Production_StateMachine_WV_WV_W3", "{52790FD3-72B2-4912-8EAD-EADA1F567B4E}"));
		//StringTable transitionList
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLER__TO__WV_133, "Production_Controller__TO__WV_133", "{08F4E621-7383-47c6-9C8E-D33BAE8EC4F8}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_WV__TO__CONTROLLER_104, "Production_WV__TO__Controller_104", "{165488FD-D1EA-4a14-8EF0-7C83264718B8}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSET__TO__SPRINGSETSCREW_60, "Production_SpringSet__TO__SpringSetScrew_60", "{4FEF7CEC-8C19-4062-B9D3-A81E36C75D07}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_WV__TO__MAGNET_102, "Production_WV__TO__Magnet_102", "{53D60CAB-9735-42e4-B8E8-39C5EE155EBC}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETSCREW__TO__SPRINGCOVER_80, "Production_SpringSetScrew__TO__SpringCover_80", "{6D595E08-24EB-4228-8895-92409E2A0FF8}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNET__TO__WAITING_144, "Production_Magnet__TO__Waiting_144", "{8E46ED6A-0627-4521-80B8-7A1946FEA72D}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_WAITING__TO__PARSING_162, "Production_Waiting__TO__Parsing_162", "{9446EBEB-7715-43b8-BED2-DE7011DD677D}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBV__TO__SPRINGSET_49, "Production_DBV__TO__SpringSet_49", "{9AAFD0D8-1F76-49e4-BD7C-169FDCD580BA}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_PARSING__TO__HOUSING_16, "Production_Parsing__TO__Housing_16", "{9C489CE9-CDF9-46e9-AB39-0521D62E65D3}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_INITIAL_18__TO__WAITING_161, "Production_Initial_18__TO__Waiting_161", "{9E2839E9-EA5F-48c1-8CA9-BA57D4706FE7}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_PARSING__TO__WAITING_186, "Production_Parsing__TO__Waiting_186", "{AA6534D8-013F-4ab2-8DBC-984AB3F6DEE6}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVER__TO__WV_85, "Production_SpringCover__TO__WV_85", "{AF062F28-36A9-4a52-9E4B-DE1A8FA8F8BA}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLER__TO__SPRINGCOVER_134, "Production_Controller__TO__SpringCover_134", "{BEDB512A-10D8-44a9-BB43-A7001650C177}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLER__TO__MAGNET_103, "Production_Controller__TO__Magnet_103", "{D8B63B34-A41B-4b1e-877B-7698D95DEEA2}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETSCREW__TO__WV_118, "Production_SpringSetScrew__TO__WV_118", "{DC8BFAA8-CCC8-47b9-9F4B-C9CA6798D5EB}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVER__TO__MAGNET_94, "Production_SpringCover__TO__Magnet_94", "{DF5C930F-182F-4a8b-AA8B-63EC25070C01}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSING__TO__DBV_50, "Production_Housing__TO__DBV_50", "{ED6BFED3-0028-4127-8358-96BADA70C172}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVER__TO__CONTROLLER_105, "Production_SpringCover__TO__Controller_105", "{FEF0E0B6-24DC-4c04-8AF6-081332D3D33F}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING5_179, "Production_ControllerSpringReading__TO__Spring5_179", "{260A5AE5-467D-4989-AEE9-18695184201C}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLER_STANDARD__TO__CONTROLLERSPRINGREADING_177, "Production_Controller_standard__TO__ControllerSpringReading_177", "{2CA368E4-7F51-4cfa-B145-13C24EBD37E1}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING7_180, "Production_ControllerSpringReading__TO__Spring7_180", "{32256A66-EBA1-4b58-9B10-0EC6A499C30B}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLER_D__TO__CONTROLLERSPRINGREADING_172, "Production_Controller_D__TO__ControllerSpringReading_172", "{418584F1-21EE-45e3-BC61-6A63C43A87E5}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRING5__TO__CONTROLLERROUTE_183, "Production_Spring5__TO__ControllerRoute_183", "{4D262FCF-1A06-4d0d-B65E-DA1B4E50E955}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERROUTE__TO__CONTROLFINAL_216_165, "Production_ControllerRoute__TO__ControlFinal_216_165", "{94CC4630-97D2-4128-827C-4A2856C32045}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLER_L__TO__CONTROLLERSPRINGREADING_176, "Production_Controller_L__TO__ControllerSpringReading_176", "{9C095DFA-6831-4dd8-AB28-10175742A7FE}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_81_127, "Production_ControllerReading__TO__Controller_81_127", "{9CC678C9-381A-4421-BA5C-958B610E00FB}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRING7__TO__CONTROLLERROUTE_184, "Production_Spring7__TO__ControllerRoute_184", "{A0CF4A2B-6C4B-45f0-B5DB-F912C123C153}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERINITIAL_115__TO__CONTROLLERREADING_101, "Production_ControllerInitial_115__TO__ControllerReading_101", "{A70C0331-472A-4cb9-A7D8-4DA09EB19C01}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_E_123, "Production_ControllerReading__TO__Controller_E_123", "{A79E2B94-B7FB-44be-8990-FC901DAB4AD0}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_D_99, "Production_ControllerReading__TO__Controller_D_99", "{AD6EAB85-3B2B-43b5-BC2B-8F29FDDB1099}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLER_I__TO__CONTROLLERSPRINGREADING_174, "Production_Controller_I__TO__ControllerSpringReading_174", "{B8546C98-AFB9-4deb-80F3-6B75EE2E64E3}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRING2__TO__CONTROLLERROUTE_182, "Production_Spring2__TO__ControllerRoute_182", "{B977A9A7-D548-4ecb-BB3E-400EFBDF0B5F}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_STANDARD_125, "Production_ControllerReading__TO__Controller_standard_125", "{BB6EF4EF-16CD-48db-B285-7AB239D1415E}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLER_81__TO__CONTROLLERSPRINGREADING_175, "Production_Controller_81__TO__ControllerSpringReading_175", "{C5AFE62C-0205-492b-900C-AEEE738D5A2C}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING9_181, "Production_ControllerSpringReading__TO__Spring9_181", "{D1529D48-093E-4e19-AD36-8D240FE9BEEC}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_L_126, "Production_ControllerReading__TO__Controller_L_126", "{DA7C2ABB-1F29-4336-985B-D3EA49B21D63}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_I_124, "Production_ControllerReading__TO__Controller_I_124", "{E82FC8BC-3560-4a33-B1BF-E5F081106CB5}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING2_178, "Production_ControllerSpringReading__TO__Spring2_178", "{ED5A52DF-8C5C-466b-A47C-1647144B891C}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRING9__TO__CONTROLLERROUTE_185, "Production_Spring9__TO__ControllerRoute_185", "{F3F7C3A2-F9AB-46d7-821A-226B006F3ED3}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_CONTROLLER_E__TO__CONTROLLERSPRINGREADING_173, "Production_Controller_E__TO__ControllerSpringReading_173", "{FF5AABDC-3C42-41ec-9603-1E5363337DE2}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_B_154, "Production_DBVReading__TO__DBV_B_154", "{1E561466-844A-456c-B5B0-4BCC334BB090}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBVINITIAL_44__TO__DBVREADING_33, "Production_DBVInitial_44__TO__DBVReading_33", "{275CC129-B92D-4569-8DAB-35CD8D98A692}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_C_32, "Production_DBVReading__TO__DBV_C_32", "{3342A524-2F4F-4442-AA0F-5EC0B135FFBA}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_AB_155, "Production_DBVReading__TO__DBV_AB_155", "{3BF82A14-D9BD-4b14-8283-8AFD081010D8}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBV_B__TO__DBVFINAL_45_28, "Production_DBV_B__TO__DBVFinal_45_28", "{6AD6C86D-7478-4ed5-A512-6D53B50F474E}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_A_153, "Production_DBVReading__TO__DBV_A_153", "{9677D99D-E03C-4675-925C-738E468BFFB3}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBV_AXBX__TO__DBVFINAL_45_141, "Production_DBV_AxBx__TO__DBVFinal_45_141", "{9CC54CD1-121F-46a2-BCE6-B21083E152DE}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_AXBX_109, "Production_DBVReading__TO__DBV_AxBx_109", "{B3A4A5AD-3E86-4d7d-ACA7-72CFC880DB46}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBV_A__TO__DBVFINAL_45_27, "Production_DBV_A__TO__DBVFinal_45_27", "{BB328CEF-2E66-48e3-B926-D28AEEE33292}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBV_AB__TO__DBVFINAL_45_29, "Production_DBV_AB__TO__DBVFinal_45_29", "{CD4DE0FF-A9DC-4f8d-904A-9474F9238A09}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBV_C__TO__DBVFINAL_45_34, "Production_DBV_C__TO__DBVFinal_45_34", "{D2825CA6-3E21-4741-83BB-8962D6C49446}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_DBVREADING__TO__DBVFINAL_45_142, "Production_DBVReading__TO__DBVFinal_45_142", "{E6C05E3A-FE57-41f0-99A3-305BF28385BC}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_EI_25, "Production_HousingReading__TO__Housing_EI_25", "{13A0D9E1-DAA6-4d47-860D-7EBE6832D7DC}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_HA_22, "Production_HousingReading__TO__Housing_HA_22", "{1432BC7B-84C2-4d41-AFC7-753524AEE7CF}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSING_EI__TO__HOUSINGFINAL_56_156, "Production_Housing_EI__TO__HousingFinal_56_156", "{1EA08315-953E-4202-B587-4A92E172ECC1}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSING_E__TO__HOUSINGFINAL_56_38, "Production_Housing_E__TO__HousingFinal_56_38", "{246BF6DC-9F82-433c-8C43-6B8D350BC4CB}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSING_HAUNF__TO__HOUSINGFINAL_56_37, "Production_Housing_HAUNF__TO__HousingFinal_56_37", "{37FA3DCB-C286-465b-A676-F8BE084276D5}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_HAUNF_23, "Production_HousingReading__TO__Housing_HAUNF_23", "{5985C850-5053-4c10-B6AB-58045CE216D3}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSINGINITIAL_17__TO__HOUSINGREADING_9, "Production_HousingInitial_17__TO__HousingReading_9", "{7070ACF6-23D7-4aec-A154-9D83F0939A13}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_E_24, "Production_HousingReading__TO__Housing_E_24", "{AD2E0307-9B65-4231-8607-598C739F8E06}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSING_HA__TO__HOUSINGFINAL_56_36, "Production_Housing_HA__TO__HousingFinal_56_36", "{D4A2D964-0BC6-41ce-A2D0-09807A961E58}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSING_A__TO__HOUSINGFINAL_56_35, "Production_Housing_A__TO__HousingFinal_56_35", "{D5243EE6-D292-4e00-B8D5-AB1923AED3E6}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_A_19, "Production_HousingReading__TO__Housing_A_19", "{FAE8B2E5-D77B-4816-A91A-5283F07F357F}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNET_S12__TO__MAGNETFINAL_217_171, "Production_Magnet_S12__TO__MagnetFinal_217_171", "{0DEEEE23-CAAC-498d-955B-EC20E47B8530}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNET_X12__TO__MAGNETFINAL_106_136, "Production_Magnet_X12__TO__MagnetFinal_106_136", "{15089152-EE77-4e06-BA69-AA696A9CB2CB}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNET_G24__TO__MAGNETFINAL_106_92, "Production_Magnet_G24__TO__MagnetFinal_106_92", "{1B77C11F-AD92-4c4b-9A98-48441BDDF45E}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_G24_90, "Production_MagnetReading__TO__Magnet_G24_90", "{221F354F-B947-4b1b-86D5-7AC0053285E0}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNET_G24__TO__MAGNETFINAL_217_168, "Production_Magnet_G24__TO__MagnetFinal_217_168", "{32384BC2-2CE9-40cf-844C-C03F91905CA2}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNETINITIAL_108__TO__MAGNETREADING_96, "Production_MagnetInitial_108__TO__MagnetReading_96", "{56EB245B-6A9D-463f-ABF0-B3D08C98B630}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_S12_150, "Production_MagnetReading__TO__Magnet_S12_150", "{675EF7B7-E350-4ff3-BFCF-498819584E50}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNET_AMP24__TO__MAGNETFINAL_217_170, "Production_Magnet_AMP24__TO__MagnetFinal_217_170", "{79B7A87F-477B-4c5c-B4BC-343965E2E155}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_AMP24_137, "Production_MagnetReading__TO__Magnet_AMP24_137", "{7EA33892-7D8F-4afb-8345-969F692B3907}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNET_S12__TO__MAGNETFINAL_106_151, "Production_Magnet_S12__TO__MagnetFinal_106_151", "{851FE38D-A791-43c5-BFBE-0CA371E86C74}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNET_AMP24__TO__MAGNETFINAL_106_138, "Production_Magnet_AMP24__TO__MagnetFinal_106_138", "{B62457B4-24E7-4bf6-A34C-24EFDA5B59EE}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNET_X12__TO__MAGNETFINAL_217_169, "Production_Magnet_X12__TO__MagnetFinal_217_169", "{E2B21D8E-400C-4e4a-8796-B1D16161C475}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_X12_135, "Production_MagnetReading__TO__Magnet_X12_135", "{F98F87F7-24E9-4b0c-898D-72B2950E39BD}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNETFINAL_106_139, "Production_MagnetReading__TO__MagnetFinal_106_139", "{FA2EB204-FD1F-4984-9F30-41C529639E93}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVERROUTE__TO__SPRINGCOVERFINAL_215_164, "Production_SpringCoverRoute__TO__SpringCoverFinal_215_164", "{17F26D17-F704-468f-8876-ADE94A9F8C0D}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVER_A__TO__SPRINGCOVERROUTE_86, "Production_SpringCover_A__TO__SpringCoverRoute_86", "{2C6C4BDF-411B-41b2-960E-45FC7CD4F620}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVER_HA__TO__SPRINGCOVERFINAL_87_74, "Production_SpringCover_HA__TO__SpringCoverFinal_87_74", "{3660E695-D2C1-4010-BB5B-CF8BE2CDDE10}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVER_WA__TO__SPRINGCOVERROUTE_113, "Production_SpringCover_WA__TO__SpringCoverRoute_113", "{65ED1926-2604-401d-8CCF-246BC61E2681}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVER_CAN__TO__SPRINGCOVERROUTE_115, "Production_SpringCover_CAN__TO__SpringCoverRoute_115", "{956B63CF-168B-4a18-828B-80C295205EF0}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_HA_71, "Production_SpringCoverReading__TO__SpringCover_HA_71", "{98D674D6-F567-4d94-8932-60F22232D30D}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVER_E__TO__SPRINGCOVERROUTE_117, "Production_SpringCover_E__TO__SpringCoverRoute_117", "{98E56F44-76FD-4620-8960-9E99B5195DA5}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVER_HA__TO__SPRINGCOVERROUTE_87, "Production_SpringCover_HA__TO__SpringCoverRoute_87", "{9A7E33CF-4E3D-44c9-BDB0-435EE00316A8}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVERINITIAL_86__TO__SPRINGCOVERREADING_76, "Production_SpringCoverInitial_86__TO__SpringCoverReading_76", "{A440076C-F31D-4ba1-95A3-9C3433D10C43}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVER_HUNF__TO__SPRINGCOVERROUTE_111, "Production_SpringCover_HUNF__TO__SpringCoverRoute_111", "{D7174A8F-AD92-417b-824E-4DDD8E6432C4}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_CAN_114, "Production_SpringCoverReading__TO__SpringCover_CAN_114", "{D7317536-4E2E-495b-BB69-A89AEA5EC472}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_WA_112, "Production_SpringCoverReading__TO__SpringCover_WA_112", "{DA101EB2-62F5-43e2-A53A-09AC462617E8}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_HUNF_110, "Production_SpringCoverReading__TO__SpringCover_HUNF_110", "{DAFBF622-6E8F-42db-9A4C-B864895A0111}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVER_A__TO__SPRINGCOVERFINAL_87_73, "Production_SpringCover_A__TO__SpringCoverFinal_87_73", "{DB857216-0F36-4324-853E-6BEA68D734EB}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_A_70, "Production_SpringCoverReading__TO__SpringCover_A_70", "{DCA745C1-8255-4c35-921B-91830F2E9398}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_E_116, "Production_SpringCoverReading__TO__SpringCover_E_116", "{F3E51ABA-CAF2-4f81-8E3E-8D3C150E5AEA}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_H_43, "Production_SpringSetReading__TO__SpringSet_H_43", "{15DF8B42-118E-4d40-8AD2-A170D20FFAF7}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_CAN_44, "Production_SpringSetReading__TO__SpringSet_CAN_44", "{19E25482-4D4B-4c60-86EA-608E693E5A88}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSET_CAN__TO__SPRINGSETFINAL_60_47, "Production_SpringSet_CAN__TO__SpringSetFinal_60_47", "{3176ECE9-37CC-4f3c-B842-93DAAAEF3597}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSET_A__TO__SPRINGSETFINAL_60_122, "Production_SpringSet_A__TO__SpringSetFinal_60_122", "{3627142F-30F1-4d88-A0D5-A1B23AD8C1B6}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETINITIAL_59__TO__SPRINGSETREADING_40, "Production_SpringSetInitial_59__TO__SpringSetReading_40", "{6C615631-1363-4712-9A75-4B34CFD98421}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSET_E__TO__SPRINGSETFINAL_60_41, "Production_SpringSet_E__TO__SpringSetFinal_60_41", "{71A1DA0B-057E-42a4-8A77-64B8290D9F5B}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_A_121, "Production_SpringSetReading__TO__SpringSet_A_121", "{75B1E66E-98D2-4a20-8E21-0E5B00CBBBC2}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSET_H__TO__SPRINGSETFINAL_60_46, "Production_SpringSet_H__TO__SpringSetFinal_60_46", "{C72D9A0E-6DDB-4378-A8BA-3D52AB723C4B}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_E_42, "Production_SpringSetReading__TO__SpringSet_E_42", "{FB0CA30D-6F2A-4d55-A55E-B3B386AC1FD8}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETSCREW_WA__TO__SPRINGSETSCREWROUTE_78, "Production_SpringSetScrew_WA__TO__SpringSetScrewRoute_78", "{07A351A7-48D5-4b37-82CD-0F7018A583B2}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETSCREW_A__TO__SPRINGSETSCREWROUTE_77, "Production_SpringSetScrew_A__TO__SpringSetScrewRoute_77", "{15915640-3416-42d5-BD5A-40FF91D628A2}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETSCREWROUTE__TO__SPRINGSETSCREWFINAL_214_163, "Production_SpringSetScrewRoute__TO__SpringSetScrewFinal_214_163", "{600F0903-F134-4d1f-B2D4-89E29C923BB9}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETSCREW_CAN__TO__SPRINGSETSCREWROUTE_79, "Production_SpringSetScrew_CAN__TO__SpringSetScrewRoute_79", "{6BAF1A10-9D78-4bc9-AF6A-F29338CA98F5}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_CAN_147, "Production_SpringSetScrewReading__TO__SpringSetScrew_CAN_147", "{804B8F6F-A85F-4332-AED2-8FFDC4F13DC4}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETSCREWINITIAL_69__TO__SPRINGSETSCREWREADING_59, "Production_SpringSetScrewInitial_69__TO__SpringSetScrewReading_59", "{86A6E1F8-F3DD-46ca-9962-F334B9119D62}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_A_145, "Production_SpringSetScrewReading__TO__SpringSetScrew_A_145", "{9B78A538-8836-41f6-B9B5-85FF908E0789}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_WA_146, "Production_SpringSetScrewReading__TO__SpringSetScrew_WA_146", "{B65B593F-1169-4063-90EE-FC50A70A9A55}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_WVREADING__TO__WV_W3_82, "Production_WVReading__TO__WV_W3_82", "{05994D47-1FC7-4c74-8B21-05241856EBB1}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_WVREADING__TO__WVROUTE_140, "Production_WVReading__TO__WVRoute_140", "{17E7A2AB-B10A-4225-A5EC-AEF5A713EE11}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_WV_W3__TO__WVROUTE_84, "Production_WV_W3__TO__WVRoute_84", "{278A4B5A-578D-4494-BB0B-D1DB430A236D}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_INITIALWV_107__TO__WVREADING_95, "Production_InitialWV_107__TO__WVReading_95", "{3CBC8F39-7B41-4e1e-9768-596D95D9DD69}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_WVROUTE__TO__WVFINAL_218_167, "Production_WVRoute__TO__WVFinal_218_167", "{59A0A28D-C910-4afe-BECA-716722EF7629}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_WV_W1__TO__WVROUTE_120, "Production_WV_W1__TO__WVRoute_120", "{8625F708-1414-48f3-8A88-414E85B25FB9}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_WVREADING__TO__WV_STANDARD_81, "Production_WVReading__TO__WV_standard_81", "{A10AAB95-88AB-4d67-8ECD-1F011CE37006}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_WV_STANDARD__TO__WVROUTE_83, "Production_WV_standard__TO__WVRoute_83", "{A2EFD8D6-FB64-479e-B594-A60AEFD6FF51}"));
		stringTable.transitionList.push(new TransitionDictionaryNode(TransitionEnum.Production_ENUM_WVREADING__TO__WV_W1_119, "Production_WVReading__TO__WV_W1_119", "{FF605DA6-E3AD-4bc3-BA44-501ED36048CB}"));
	};
	
	this.runStateMachines = function() {
		this.runStateMachineByEnum(StateMachineEnum.Production_ENUM_STATEMACHINE);	
	};
	
	this.runStateMachineByEnum = function(statemachine) {
		if(this.base.getCurrentStatesCount() > 0)
			return;
		switch (statemachine) 
		{
			case StateMachineEnum.Production_ENUM_STATEMACHINE:
				var entryArray = [EntryEnum.Production_ENUM_STATEMACHINE_INITIAL_18];
				this.runStateMachine(statemachine, null, null, entryArray);	//submachineState is null if run standalone statemachine 
				break;
		}
	};
	
	this.runStateMachine = function(statemachine, submachineState, signal, entryArray) 
	{
		if(submachineState === null)
		{
			var initialData = new StateInitialData(StateEnum.Production_VIRTUAL_SUBMACHINESTATE, StateEnum.NOSTATE, 1, false, ""); 
			submachineState = new StateData(this.base, initialData);
			submachineState.incrementActiveCount();
			this.base.lstStateData.push(submachineState);
		}
		switch (statemachine) 
		{
			case StateMachineEnum.Production_ENUM_STATEMACHINE:
				var initialDataArray = 
					[
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, StateEnum.NOSTATE, 1, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_DBV, StateEnum.NOSTATE, 1, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_HOUSING, StateEnum.NOSTATE, 1, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_MAGNET, StateEnum.NOSTATE, 1, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_PARSING, StateEnum.NOSTATE, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, StateEnum.NOSTATE, 1, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET, StateEnum.NOSTATE, 1, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW, StateEnum.NOSTATE, 1, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_WAITING, StateEnum.NOSTATE, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_WV, StateEnum.NOSTATE, 1, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLFINAL_216, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45, StateEnum.Production_ENUM_STATEMACHINE_DBV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING, StateEnum.Production_ENUM_STATEMACHINE_DBV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_A, StateEnum.Production_ENUM_STATEMACHINE_DBV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AB, StateEnum.Production_ENUM_STATEMACHINE_DBV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AXBX, StateEnum.Production_ENUM_STATEMACHINE_DBV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_B, StateEnum.Production_ENUM_STATEMACHINE_DBV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_C, StateEnum.Production_ENUM_STATEMACHINE_DBV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGFINAL_56, StateEnum.Production_ENUM_STATEMACHINE_HOUSING, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING, StateEnum.Production_ENUM_STATEMACHINE_HOUSING, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E, StateEnum.Production_ENUM_STATEMACHINE_HOUSING, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI, StateEnum.Production_ENUM_STATEMACHINE_HOUSING, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF, StateEnum.Production_ENUM_STATEMACHINE_HOUSING, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A, StateEnum.Production_ENUM_STATEMACHINE_HOUSING, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA, StateEnum.Production_ENUM_STATEMACHINE_HOUSING, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_106, StateEnum.Production_ENUM_STATEMACHINE_MAGNET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_217, StateEnum.Production_ENUM_STATEMACHINE_MAGNET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12, StateEnum.Production_ENUM_STATEMACHINE_MAGNET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING, StateEnum.Production_ENUM_STATEMACHINE_MAGNET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24, StateEnum.Production_ENUM_STATEMACHINE_MAGNET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24, StateEnum.Production_ENUM_STATEMACHINE_MAGNET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12, StateEnum.Production_ENUM_STATEMACHINE_MAGNET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_87, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_215, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETFINAL_60, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWFINAL_214, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_WV_WVFINAL_218, StateEnum.Production_ENUM_STATEMACHINE_WV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE, StateEnum.Production_ENUM_STATEMACHINE_WV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING, StateEnum.Production_ENUM_STATEMACHINE_WV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_STANDARD, StateEnum.Production_ENUM_STATEMACHINE_WV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W1, StateEnum.Production_ENUM_STATEMACHINE_WV, 0, false, this.base.m_sInstanceName),
						new StateInitialData(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W3, StateEnum.Production_ENUM_STATEMACHINE_WV, 0, false, this.base.m_sInstanceName)
					];
			
				this.base.createStateObjects(initialDataArray, submachineState);
				if(entryArray != null)
				{
					for(var i = 0; i < entryArray.length; i++)
					{
						switch(entryArray[i])
						{
						case EntryEnum.Production_ENUM_STATEMACHINE_INITIAL_18:
							this.transitionProc(TransitionEnum.Production_ENUM_INITIAL_18__TO__WAITING_161, signal, submachineState);
							break;
						}
					}
				}
		
				if(submachineState.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, submachineState);
				break;
		}
	};
	
	this.defer = function(event, toState) 
	{
		return false;		
			
	};
	
	this.dispatch = function(event, toState, bCheckOnly)
	{
		var bDispatched = false;
		if(toState === null || !toState.isActiveState() && !bCheckOnly)
			return bDispatched;
		switch (toState.state_enum) {
			case StateEnum.Production_VIRTUAL_SUBMACHINESTATE:
				if(event.eventEnum == EventEnum.COMPLETION)
				{
					if(!bCheckOnly)
					{
						this.base.releaseSubmachineState(toState);
						for(var i = this.base.lstStateData.length - 1; i >= 0; i--) {
							if (this.base.lstStateData[i] == toState)
							{
								this.base.lstStateData.splice(i, 1);
								break;
							}
						}
					}
					bDispatched = true;
				}
				break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard=='Controller_WV') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLER__TO__WV_133, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "Controller_SpringCover") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLER__TO__SPRINGCOVER_134, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='Controller_Magnet') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLER__TO__MAGNET_103, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_DBV:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBV__TO__SPRINGSET_49, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_HOUSING__TO__DBV_50, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET:
					switch (event.eventEnum) 
					{
						case EventEnum.ENUM_NEW:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNET__TO__WAITING_144, event.signal, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_PARSING:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.typeCodeCheck == true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_PARSING__TO__HOUSING_16, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.typeCodeCheck == false) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_PARSING__TO__WAITING_186, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard == "SpringCover_WV") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVER__TO__WV_85, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='SpringCover_Magnet') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVER__TO__MAGNET_94, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "SpringCover_Controller") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVER__TO__CONTROLLER_105, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSET__TO__SPRINGSETSCREW_60, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard == "SpringSetScrew_SpringCover") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETSCREW__TO__SPRINGCOVER_80, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "SpringSetScrew_WV") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETSCREW__TO__WV_118, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_WAITING:
					switch (event.eventEnum) 
					{
						case EventEnum.ENUM_PARSE:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_WAITING__TO__PARSING_162, event.signal, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_WV:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard=='WV_Controller') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_WV__TO__CONTROLLER_104, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='WV_Magnet') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_WV__TO__MAGNET_102, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard=="Spring5") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING5_179, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=="Spring7") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING7_180, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=="Spring9") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING9_181, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=="Spring2") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING2_178, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRING2__TO__CONTROLLERROUTE_182, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRING5__TO__CONTROLLERROUTE_183, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRING7__TO__CONTROLLERROUTE_184, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRING9__TO__CONTROLLERROUTE_185, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard=='Controller_81') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_81_127, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='Controller_E') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_E_123, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='Controller_D') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_D_99, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='Controller_standard') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_STANDARD_125, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='Controller_L') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_L_126, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='Controller_I') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_I_124, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERROUTE__TO__CONTROLFINAL_216_165, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLER_81__TO__CONTROLLERSPRINGREADING_175, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLER_D__TO__CONTROLLERSPRINGREADING_172, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLER_E__TO__CONTROLLERSPRINGREADING_173, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLER_I__TO__CONTROLLERSPRINGREADING_174, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLER_L__TO__CONTROLLERSPRINGREADING_176, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLER_STANDARD__TO__CONTROLLERSPRINGREADING_177, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard == 'DBV_B') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_B_154, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "DBV_C") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_C_32, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=="DBV_AB") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_AB_155, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "DBV_A") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_A_153, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "DBV_AxBx") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_AXBX_109, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "DBV_Final") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBVREADING__TO__DBVFINAL_45_142, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_A:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBV_A__TO__DBVFINAL_45_27, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AB:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBV_AB__TO__DBVFINAL_45_29, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AXBX:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBV_AXBX__TO__DBVFINAL_45_141, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_B:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBV_B__TO__DBVFINAL_45_28, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_C:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_DBV_C__TO__DBVFINAL_45_34, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard == "Housing_EI") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_EI_25, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "Housing_HA") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_HA_22, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "Housing_HAUNF") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_HAUNF_23, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "Housing_E") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_E_24, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='Housing_A') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_A_19, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_HOUSING_E__TO__HOUSINGFINAL_56_38, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_HOUSING_EI__TO__HOUSINGFINAL_56_156, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_HOUSING_HAUNF__TO__HOUSINGFINAL_56_37, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_HOUSING_A__TO__HOUSINGFINAL_56_35, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_HOUSING_HA__TO__HOUSINGFINAL_56_36, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNET_S12__TO__MAGNETFINAL_217_171, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNET_S12__TO__MAGNETFINAL_106_151, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard=='Magnet_G24') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_G24_90, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='Magnet_S12') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_S12_150, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='Magnet_AMP24') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_AMP24_137, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard=='Magnet_X12') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_X12_135, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNETFINAL_106_139, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNET_AMP24__TO__MAGNETFINAL_217_170, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNET_AMP24__TO__MAGNETFINAL_106_138, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNET_G24__TO__MAGNETFINAL_106_92, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNET_G24__TO__MAGNETFINAL_217_168, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNET_X12__TO__MAGNETFINAL_106_136, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_MAGNET_X12__TO__MAGNETFINAL_217_169, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard == "SpringCover_HA") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_HA_71, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "SpringCover_CAN") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_CAN_114, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "SpringCover_WA") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_WA_112, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "SpringCover_HAUNF") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_HUNF_110, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "SpringCover_A") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_A_70, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "SpringCover_E") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_E_116, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVERROUTE__TO__SPRINGCOVERFINAL_215_164, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVER_A__TO__SPRINGCOVERROUTE_86, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVER_A__TO__SPRINGCOVERFINAL_87_73, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVER_CAN__TO__SPRINGCOVERROUTE_115, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVER_E__TO__SPRINGCOVERROUTE_117, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVER_HA__TO__SPRINGCOVERFINAL_87_74, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVER_HA__TO__SPRINGCOVERROUTE_87, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVER_HUNF__TO__SPRINGCOVERROUTE_111, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVER_WA__TO__SPRINGCOVERROUTE_113, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard == "SpringSet_H") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_H_43, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "SpringSet_CAN") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_CAN_44, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "SpringSet_A") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_A_121, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == 'SpringSet_E') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_E_42, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSET_A__TO__SPRINGSETFINAL_60_122, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSET_CAN__TO__SPRINGSETFINAL_60_47, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSET_E__TO__SPRINGSETFINAL_60_41, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSET_H__TO__SPRINGSETFINAL_60_46, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETSCREWROUTE__TO__SPRINGSETSCREWFINAL_214_163, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard == 'SpringSetScrew_CAN') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_CAN_147, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "SpringSetScrew_A") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_A_145, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == "SpringSetScrew_WA") 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_WA_146, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETSCREW_A__TO__SPRINGSETSCREWROUTE_77, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETSCREW_CAN__TO__SPRINGSETSCREWROUTE_79, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETSCREW_WA__TO__SPRINGSETSCREWROUTE_78, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_WVROUTE__TO__WVFINAL_218_167, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(this.guard == 'WV_W3') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_WVREADING__TO__WV_W3_82, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == 'WV_Route') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_WVREADING__TO__WVROUTE_140, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == 'WV_standard') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_WVREADING__TO__WV_STANDARD_81, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							if(this.guard == 'WV_W1') 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_WVREADING__TO__WV_W1_119, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_WV_WV_STANDARD:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_WV_STANDARD__TO__WVROUTE_83, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W1:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_WV_W1__TO__WVROUTE_120, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
				case StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W3:
					switch (event.eventEnum) 
					{
						case EventEnum.COMPLETION:
							if(true) 
							{
								if(!bCheckOnly)
									this.transitionProc(TransitionEnum.Production_ENUM_WV_W3__TO__WVROUTE_84, null, toState.submachine_state);
								bDispatched = true;
								break;
							}
							break;
					}
					break;
		}
		if(!bDispatched && toState !== null && toState.parent_state !== null && event.eventEnum !== EventEnum.COMPLETION)
		{
			bDispatched = this.dispatch(event, toState.parent_state, true);
			if(bDispatched && !bCheckOnly)
			{
				/*1. Exit the current state; 2. Decrement the active count of the parent state; 3. dispatch the event to parent state*/
				this.stateProc(toState.state_enum, toState.submachine_state, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
				toState.parent_state.decrementActiveCount();
				this.dispatch(event, toState.parent_state, false);
				event = null;
			}
		}
		return bDispatched;
	};
	
	this.transitionProc = function(transition, signal, submachineState) 
	{
		this.base.currentTransition.setTransition(transition, submachineState, this.base.m_sInstanceName);
		switch (transition) 
		{
			case TransitionEnum.Production_ENUM_CONTROLLER__TO__WV_133:
				this.transition_Controller__TO__WV_133(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_WV__TO__CONTROLLER_104:
				this.transition_WV__TO__Controller_104(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSET__TO__SPRINGSETSCREW_60:
				this.transition_SpringSet__TO__SpringSetScrew_60(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_WV__TO__MAGNET_102:
				this.transition_WV__TO__Magnet_102(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETSCREW__TO__SPRINGCOVER_80:
				this.transition_SpringSetScrew__TO__SpringCover_80(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNET__TO__WAITING_144:
				this.transition_Magnet__TO__Waiting_144(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_WAITING__TO__PARSING_162:
				this.transition_Waiting__TO__Parsing_162(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBV__TO__SPRINGSET_49:
				this.transition_DBV__TO__SpringSet_49(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_PARSING__TO__HOUSING_16:
				this.transition_Parsing__TO__Housing_16(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_INITIAL_18__TO__WAITING_161:
				this.transition_Initial_18__TO__Waiting_161(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_PARSING__TO__WAITING_186:
				this.transition_Parsing__TO__Waiting_186(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVER__TO__WV_85:
				this.transition_SpringCover__TO__WV_85(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLER__TO__SPRINGCOVER_134:
				this.transition_Controller__TO__SpringCover_134(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLER__TO__MAGNET_103:
				this.transition_Controller__TO__Magnet_103(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETSCREW__TO__WV_118:
				this.transition_SpringSetScrew__TO__WV_118(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVER__TO__MAGNET_94:
				this.transition_SpringCover__TO__Magnet_94(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSING__TO__DBV_50:
				this.transition_Housing__TO__DBV_50(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVER__TO__CONTROLLER_105:
				this.transition_SpringCover__TO__Controller_105(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING5_179:
				this.transition_ControllerSpringReading__TO__Spring5_179(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLER_STANDARD__TO__CONTROLLERSPRINGREADING_177:
				this.transition_Controller_standard__TO__ControllerSpringReading_177(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING7_180:
				this.transition_ControllerSpringReading__TO__Spring7_180(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLER_D__TO__CONTROLLERSPRINGREADING_172:
				this.transition_Controller_D__TO__ControllerSpringReading_172(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRING5__TO__CONTROLLERROUTE_183:
				this.transition_Spring5__TO__ControllerRoute_183(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERROUTE__TO__CONTROLFINAL_216_165:
				this.transition_ControllerRoute__TO__ControlFinal_216_165(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLER_L__TO__CONTROLLERSPRINGREADING_176:
				this.transition_Controller_L__TO__ControllerSpringReading_176(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_81_127:
				this.transition_ControllerReading__TO__Controller_81_127(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRING7__TO__CONTROLLERROUTE_184:
				this.transition_Spring7__TO__ControllerRoute_184(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERINITIAL_115__TO__CONTROLLERREADING_101:
				this.transition_ControllerInitial_115__TO__ControllerReading_101(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_E_123:
				this.transition_ControllerReading__TO__Controller_E_123(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_D_99:
				this.transition_ControllerReading__TO__Controller_D_99(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLER_I__TO__CONTROLLERSPRINGREADING_174:
				this.transition_Controller_I__TO__ControllerSpringReading_174(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRING2__TO__CONTROLLERROUTE_182:
				this.transition_Spring2__TO__ControllerRoute_182(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_STANDARD_125:
				this.transition_ControllerReading__TO__Controller_standard_125(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLER_81__TO__CONTROLLERSPRINGREADING_175:
				this.transition_Controller_81__TO__ControllerSpringReading_175(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING9_181:
				this.transition_ControllerSpringReading__TO__Spring9_181(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_L_126:
				this.transition_ControllerReading__TO__Controller_L_126(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERREADING__TO__CONTROLLER_I_124:
				this.transition_ControllerReading__TO__Controller_I_124(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLERSPRINGREADING__TO__SPRING2_178:
				this.transition_ControllerSpringReading__TO__Spring2_178(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRING9__TO__CONTROLLERROUTE_185:
				this.transition_Spring9__TO__ControllerRoute_185(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_CONTROLLER_E__TO__CONTROLLERSPRINGREADING_173:
				this.transition_Controller_E__TO__ControllerSpringReading_173(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_B_154:
				this.transition_DBVReading__TO__DBV_B_154(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBVINITIAL_44__TO__DBVREADING_33:
				this.transition_DBVInitial_44__TO__DBVReading_33(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_C_32:
				this.transition_DBVReading__TO__DBV_C_32(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_AB_155:
				this.transition_DBVReading__TO__DBV_AB_155(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBV_B__TO__DBVFINAL_45_28:
				this.transition_DBV_B__TO__DBVFinal_45_28(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_A_153:
				this.transition_DBVReading__TO__DBV_A_153(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBV_AXBX__TO__DBVFINAL_45_141:
				this.transition_DBV_AxBx__TO__DBVFinal_45_141(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBVREADING__TO__DBV_AXBX_109:
				this.transition_DBVReading__TO__DBV_AxBx_109(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBV_A__TO__DBVFINAL_45_27:
				this.transition_DBV_A__TO__DBVFinal_45_27(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBV_AB__TO__DBVFINAL_45_29:
				this.transition_DBV_AB__TO__DBVFinal_45_29(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBV_C__TO__DBVFINAL_45_34:
				this.transition_DBV_C__TO__DBVFinal_45_34(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_DBVREADING__TO__DBVFINAL_45_142:
				this.transition_DBVReading__TO__DBVFinal_45_142(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_EI_25:
				this.transition_HousingReading__TO__Housing_EI_25(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_HA_22:
				this.transition_HousingReading__TO__Housing_HA_22(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSING_EI__TO__HOUSINGFINAL_56_156:
				this.transition_Housing_EI__TO__HousingFinal_56_156(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSING_E__TO__HOUSINGFINAL_56_38:
				this.transition_Housing_E__TO__HousingFinal_56_38(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSING_HAUNF__TO__HOUSINGFINAL_56_37:
				this.transition_Housing_HAUNF__TO__HousingFinal_56_37(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_HAUNF_23:
				this.transition_HousingReading__TO__Housing_HAUNF_23(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSINGINITIAL_17__TO__HOUSINGREADING_9:
				this.transition_HousingInitial_17__TO__HousingReading_9(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_E_24:
				this.transition_HousingReading__TO__Housing_E_24(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSING_HA__TO__HOUSINGFINAL_56_36:
				this.transition_Housing_HA__TO__HousingFinal_56_36(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSING_A__TO__HOUSINGFINAL_56_35:
				this.transition_Housing_A__TO__HousingFinal_56_35(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_HOUSINGREADING__TO__HOUSING_A_19:
				this.transition_HousingReading__TO__Housing_A_19(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNET_S12__TO__MAGNETFINAL_217_171:
				this.transition_Magnet_S12__TO__MagnetFinal_217_171(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNET_X12__TO__MAGNETFINAL_106_136:
				this.transition_Magnet_X12__TO__MagnetFinal_106_136(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNET_G24__TO__MAGNETFINAL_106_92:
				this.transition_Magnet_G24__TO__MagnetFinal_106_92(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_G24_90:
				this.transition_MagnetReading__TO__Magnet_G24_90(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNET_G24__TO__MAGNETFINAL_217_168:
				this.transition_Magnet_G24__TO__MagnetFinal_217_168(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNETINITIAL_108__TO__MAGNETREADING_96:
				this.transition_MagnetInitial_108__TO__MagnetReading_96(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_S12_150:
				this.transition_MagnetReading__TO__Magnet_S12_150(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNET_AMP24__TO__MAGNETFINAL_217_170:
				this.transition_Magnet_AMP24__TO__MagnetFinal_217_170(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_AMP24_137:
				this.transition_MagnetReading__TO__Magnet_AMP24_137(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNET_S12__TO__MAGNETFINAL_106_151:
				this.transition_Magnet_S12__TO__MagnetFinal_106_151(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNET_AMP24__TO__MAGNETFINAL_106_138:
				this.transition_Magnet_AMP24__TO__MagnetFinal_106_138(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNET_X12__TO__MAGNETFINAL_217_169:
				this.transition_Magnet_X12__TO__MagnetFinal_217_169(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNET_X12_135:
				this.transition_MagnetReading__TO__Magnet_X12_135(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_MAGNETREADING__TO__MAGNETFINAL_106_139:
				this.transition_MagnetReading__TO__MagnetFinal_106_139(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVERROUTE__TO__SPRINGCOVERFINAL_215_164:
				this.transition_SpringCoverRoute__TO__SpringCoverFinal_215_164(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVER_A__TO__SPRINGCOVERROUTE_86:
				this.transition_SpringCover_A__TO__SpringCoverRoute_86(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVER_HA__TO__SPRINGCOVERFINAL_87_74:
				this.transition_SpringCover_HA__TO__SpringCoverFinal_87_74(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVER_WA__TO__SPRINGCOVERROUTE_113:
				this.transition_SpringCover_WA__TO__SpringCoverRoute_113(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVER_CAN__TO__SPRINGCOVERROUTE_115:
				this.transition_SpringCover_CAN__TO__SpringCoverRoute_115(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_HA_71:
				this.transition_SpringCoverReading__TO__SpringCover_HA_71(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVER_E__TO__SPRINGCOVERROUTE_117:
				this.transition_SpringCover_E__TO__SpringCoverRoute_117(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVER_HA__TO__SPRINGCOVERROUTE_87:
				this.transition_SpringCover_HA__TO__SpringCoverRoute_87(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVERINITIAL_86__TO__SPRINGCOVERREADING_76:
				this.transition_SpringCoverInitial_86__TO__SpringCoverReading_76(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVER_HUNF__TO__SPRINGCOVERROUTE_111:
				this.transition_SpringCover_HUNF__TO__SpringCoverRoute_111(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_CAN_114:
				this.transition_SpringCoverReading__TO__SpringCover_CAN_114(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_WA_112:
				this.transition_SpringCoverReading__TO__SpringCover_WA_112(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_HUNF_110:
				this.transition_SpringCoverReading__TO__SpringCover_HUNF_110(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVER_A__TO__SPRINGCOVERFINAL_87_73:
				this.transition_SpringCover_A__TO__SpringCoverFinal_87_73(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_A_70:
				this.transition_SpringCoverReading__TO__SpringCover_A_70(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGCOVERREADING__TO__SPRINGCOVER_E_116:
				this.transition_SpringCoverReading__TO__SpringCover_E_116(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_H_43:
				this.transition_SpringSetReading__TO__SpringSet_H_43(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_CAN_44:
				this.transition_SpringSetReading__TO__SpringSet_CAN_44(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSET_CAN__TO__SPRINGSETFINAL_60_47:
				this.transition_SpringSet_CAN__TO__SpringSetFinal_60_47(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSET_A__TO__SPRINGSETFINAL_60_122:
				this.transition_SpringSet_A__TO__SpringSetFinal_60_122(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETINITIAL_59__TO__SPRINGSETREADING_40:
				this.transition_SpringSetInitial_59__TO__SpringSetReading_40(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSET_E__TO__SPRINGSETFINAL_60_41:
				this.transition_SpringSet_E__TO__SpringSetFinal_60_41(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_A_121:
				this.transition_SpringSetReading__TO__SpringSet_A_121(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSET_H__TO__SPRINGSETFINAL_60_46:
				this.transition_SpringSet_H__TO__SpringSetFinal_60_46(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETREADING__TO__SPRINGSET_E_42:
				this.transition_SpringSetReading__TO__SpringSet_E_42(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETSCREW_WA__TO__SPRINGSETSCREWROUTE_78:
				this.transition_SpringSetScrew_WA__TO__SpringSetScrewRoute_78(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETSCREW_A__TO__SPRINGSETSCREWROUTE_77:
				this.transition_SpringSetScrew_A__TO__SpringSetScrewRoute_77(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETSCREWROUTE__TO__SPRINGSETSCREWFINAL_214_163:
				this.transition_SpringSetScrewRoute__TO__SpringSetScrewFinal_214_163(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETSCREW_CAN__TO__SPRINGSETSCREWROUTE_79:
				this.transition_SpringSetScrew_CAN__TO__SpringSetScrewRoute_79(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_CAN_147:
				this.transition_SpringSetScrewReading__TO__SpringSetScrew_CAN_147(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETSCREWINITIAL_69__TO__SPRINGSETSCREWREADING_59:
				this.transition_SpringSetScrewInitial_69__TO__SpringSetScrewReading_59(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_A_145:
				this.transition_SpringSetScrewReading__TO__SpringSetScrew_A_145(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_SPRINGSETSCREWREADING__TO__SPRINGSETSCREW_WA_146:
				this.transition_SpringSetScrewReading__TO__SpringSetScrew_WA_146(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_WVREADING__TO__WV_W3_82:
				this.transition_WVReading__TO__WV_W3_82(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_WVREADING__TO__WVROUTE_140:
				this.transition_WVReading__TO__WVRoute_140(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_WV_W3__TO__WVROUTE_84:
				this.transition_WV_W3__TO__WVRoute_84(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_INITIALWV_107__TO__WVREADING_95:
				this.transition_InitialWV_107__TO__WVReading_95(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_WVROUTE__TO__WVFINAL_218_167:
				this.transition_WVRoute__TO__WVFinal_218_167(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_WV_W1__TO__WVROUTE_120:
				this.transition_WV_W1__TO__WVRoute_120(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_WVREADING__TO__WV_STANDARD_81:
				this.transition_WVReading__TO__WV_standard_81(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_WV_STANDARD__TO__WVROUTE_83:
				this.transition_WV_standard__TO__WVRoute_83(signal, submachineState); 
				break;
			case TransitionEnum.Production_ENUM_WVREADING__TO__WV_W1_119:
				this.transition_WVReading__TO__WV_W1_119(signal, submachineState); 
				break;
		}
		this.base.currentTransition.setTransition(TransitionEnum.NOTRANSITION, null, "");	
	};
	
	this.transition_Controller__TO__WV_133_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Controller__TO__WV_133 \12");
		
	};
	
	this.transition_Controller__TO__WV_133 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Controller__TO__WV_133_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_WV__TO__Controller_104_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: WV__TO__Controller_104 \12");
		
	};
	
	this.transition_WV__TO__Controller_104 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_WV__TO__Controller_104_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSet__TO__SpringSetScrew_60_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSet__TO__SpringSetScrew_60 \12");
		
	};
	
	this.transition_SpringSet__TO__SpringSetScrew_60 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSet__TO__SpringSetScrew_60_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_WV__TO__Magnet_102_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: WV__TO__Magnet_102 \12");
		
	};
	
	this.transition_WV__TO__Magnet_102 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_WV__TO__Magnet_102_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetScrew__TO__SpringCover_80_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetScrew__TO__SpringCover_80 \12");
		
	};
	
	this.transition_SpringSetScrew__TO__SpringCover_80 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetScrew__TO__SpringCover_80_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Magnet__TO__Waiting_144_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Magnet__TO__Waiting_144 \12");
		
	};
	
	this.transition_Magnet__TO__Waiting_144 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Magnet__TO__Waiting_144_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WAITING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Waiting__TO__Parsing_162_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Waiting__TO__Parsing_162 \12");
		
		this.typeCode = signal.typeCode;
	
	};
	
	this.transition_Waiting__TO__Parsing_162 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WAITING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WAITING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Waiting__TO__Parsing_162_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_PARSING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBV__TO__SpringSet_49_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBV__TO__SpringSet_49 \12");
		
	};
	
	this.transition_DBV__TO__SpringSet_49 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBV__TO__SpringSet_49_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Parsing__TO__Housing_16_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Parsing__TO__Housing_16 \12");
		
	};
	
	this.transition_Parsing__TO__Housing_16 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_PARSING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_PARSING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Parsing__TO__Housing_16_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Initial_18__TO__Waiting_161_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Initial_18__TO__Waiting_161 \12");
		
	};
	
	this.transition_Initial_18__TO__Waiting_161 = function(signal, submachineState)
	{
		if(submachineState !== null)
			submachineState.incrementActiveCount();
		this.transition_Initial_18__TO__Waiting_161_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WAITING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Parsing__TO__Waiting_186_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Parsing__TO__Waiting_186 \12");
		
	};
	
	this.transition_Parsing__TO__Waiting_186 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_PARSING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_PARSING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Parsing__TO__Waiting_186_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WAITING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCover__TO__WV_85_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCover__TO__WV_85 \12");
		
	};
	
	this.transition_SpringCover__TO__WV_85 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCover__TO__WV_85_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Controller__TO__SpringCover_134_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Controller__TO__SpringCover_134 \12");
		
	};
	
	this.transition_Controller__TO__SpringCover_134 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Controller__TO__SpringCover_134_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Controller__TO__Magnet_103_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Controller__TO__Magnet_103 \12");
		
	};
	
	this.transition_Controller__TO__Magnet_103 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Controller__TO__Magnet_103_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetScrew__TO__WV_118_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetScrew__TO__WV_118 \12");
		
	};
	
	this.transition_SpringSetScrew__TO__WV_118 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetScrew__TO__WV_118_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCover__TO__Magnet_94_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCover__TO__Magnet_94 \12");
		
	};
	
	this.transition_SpringCover__TO__Magnet_94 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCover__TO__Magnet_94_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Housing__TO__DBV_50_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Housing__TO__DBV_50 \12");
		
	};
	
	this.transition_Housing__TO__DBV_50 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Housing__TO__DBV_50_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCover__TO__Controller_105_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCover__TO__Controller_105 \12");
		
	};
	
	this.transition_SpringCover__TO__Controller_105 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCover__TO__Controller_105_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerSpringReading__TO__Spring5_179_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerSpringReading__TO__Spring5_179 \12");
		
	};
	
	this.transition_ControllerSpringReading__TO__Spring5_179 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_ControllerSpringReading__TO__Spring5_179_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Controller_standard__TO__ControllerSpringReading_177_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Controller_standard__TO__ControllerSpringReading_177 \12");
		
	};
	
	this.transition_Controller_standard__TO__ControllerSpringReading_177 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Controller_standard__TO__ControllerSpringReading_177_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerSpringReading__TO__Spring7_180_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerSpringReading__TO__Spring7_180 \12");
		
	};
	
	this.transition_ControllerSpringReading__TO__Spring7_180 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_ControllerSpringReading__TO__Spring7_180_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Controller_D__TO__ControllerSpringReading_172_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Controller_D__TO__ControllerSpringReading_172 \12");
		
	};
	
	this.transition_Controller_D__TO__ControllerSpringReading_172 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Controller_D__TO__ControllerSpringReading_172_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Spring5__TO__ControllerRoute_183_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Spring5__TO__ControllerRoute_183 \12");
		
	};
	
	this.transition_Spring5__TO__ControllerRoute_183 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Spring5__TO__ControllerRoute_183_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerRoute__TO__ControlFinal_216_165_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerRoute__TO__ControlFinal_216_165 \12");
		
	};
	
	this.transition_ControllerRoute__TO__ControlFinal_216_165 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_ControllerRoute__TO__ControlFinal_216_165_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLFINAL_216, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Controller_L__TO__ControllerSpringReading_176_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Controller_L__TO__ControllerSpringReading_176 \12");
		
	};
	
	this.transition_Controller_L__TO__ControllerSpringReading_176 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Controller_L__TO__ControllerSpringReading_176_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerReading__TO__Controller_81_127_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerReading__TO__Controller_81_127 \12");
		
	};
	
	this.transition_ControllerReading__TO__Controller_81_127 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_ControllerReading__TO__Controller_81_127_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Spring7__TO__ControllerRoute_184_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Spring7__TO__ControllerRoute_184 \12");
		
	};
	
	this.transition_Spring7__TO__ControllerRoute_184 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Spring7__TO__ControllerRoute_184_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerInitial_115__TO__ControllerReading_101_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerInitial_115__TO__ControllerReading_101 \12");
		
	};
	
	this.transition_ControllerInitial_115__TO__ControllerReading_101 = function(signal, submachineState)
	{
		this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER).incrementActiveCount();
		this.transition_ControllerInitial_115__TO__ControllerReading_101_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerReading__TO__Controller_E_123_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerReading__TO__Controller_E_123 \12");
		
	};
	
	this.transition_ControllerReading__TO__Controller_E_123 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_ControllerReading__TO__Controller_E_123_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerReading__TO__Controller_D_99_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerReading__TO__Controller_D_99 \12");
		
	};
	
	this.transition_ControllerReading__TO__Controller_D_99 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_ControllerReading__TO__Controller_D_99_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Controller_I__TO__ControllerSpringReading_174_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Controller_I__TO__ControllerSpringReading_174 \12");
		
	};
	
	this.transition_Controller_I__TO__ControllerSpringReading_174 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Controller_I__TO__ControllerSpringReading_174_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Spring2__TO__ControllerRoute_182_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Spring2__TO__ControllerRoute_182 \12");
		
	};
	
	this.transition_Spring2__TO__ControllerRoute_182 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Spring2__TO__ControllerRoute_182_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerReading__TO__Controller_standard_125_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerReading__TO__Controller_standard_125 \12");
		
	};
	
	this.transition_ControllerReading__TO__Controller_standard_125 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_ControllerReading__TO__Controller_standard_125_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Controller_81__TO__ControllerSpringReading_175_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Controller_81__TO__ControllerSpringReading_175 \12");
		
	};
	
	this.transition_Controller_81__TO__ControllerSpringReading_175 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Controller_81__TO__ControllerSpringReading_175_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerSpringReading__TO__Spring9_181_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerSpringReading__TO__Spring9_181 \12");
		
	};
	
	this.transition_ControllerSpringReading__TO__Spring9_181 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_ControllerSpringReading__TO__Spring9_181_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerReading__TO__Controller_L_126_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerReading__TO__Controller_L_126 \12");
		
	};
	
	this.transition_ControllerReading__TO__Controller_L_126 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_ControllerReading__TO__Controller_L_126_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerReading__TO__Controller_I_124_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerReading__TO__Controller_I_124 \12");
		
	};
	
	this.transition_ControllerReading__TO__Controller_I_124 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_ControllerReading__TO__Controller_I_124_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_ControllerSpringReading__TO__Spring2_178_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: ControllerSpringReading__TO__Spring2_178 \12");
		
	};
	
	this.transition_ControllerSpringReading__TO__Spring2_178 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_ControllerSpringReading__TO__Spring2_178_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Spring9__TO__ControllerRoute_185_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Spring9__TO__ControllerRoute_185 \12");
		
	};
	
	this.transition_Spring9__TO__ControllerRoute_185 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Spring9__TO__ControllerRoute_185_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Controller_E__TO__ControllerSpringReading_173_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Controller_E__TO__ControllerSpringReading_173 \12");
		
	};
	
	this.transition_Controller_E__TO__ControllerSpringReading_173 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Controller_E__TO__ControllerSpringReading_173_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBVReading__TO__DBV_B_154_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBVReading__TO__DBV_B_154 \12");
		
	};
	
	this.transition_DBVReading__TO__DBV_B_154 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBVReading__TO__DBV_B_154_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_B, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBVInitial_44__TO__DBVReading_33_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBVInitial_44__TO__DBVReading_33 \12");
		
	};
	
	this.transition_DBVInitial_44__TO__DBVReading_33 = function(signal, submachineState)
	{
		this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV).incrementActiveCount();
		this.transition_DBVInitial_44__TO__DBVReading_33_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBVReading__TO__DBV_C_32_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBVReading__TO__DBV_C_32 \12");
		
	};
	
	this.transition_DBVReading__TO__DBV_C_32 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBVReading__TO__DBV_C_32_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_C, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBVReading__TO__DBV_AB_155_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBVReading__TO__DBV_AB_155 \12");
		
	};
	
	this.transition_DBVReading__TO__DBV_AB_155 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBVReading__TO__DBV_AB_155_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AB, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBV_B__TO__DBVFinal_45_28_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBV_B__TO__DBVFinal_45_28 \12");
		
	};
	
	this.transition_DBV_B__TO__DBVFinal_45_28 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_B).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_B, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBV_B__TO__DBVFinal_45_28_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBVReading__TO__DBV_A_153_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBVReading__TO__DBV_A_153 \12");
		
	};
	
	this.transition_DBVReading__TO__DBV_A_153 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBVReading__TO__DBV_A_153_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_A, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBV_AxBx__TO__DBVFinal_45_141_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBV_AxBx__TO__DBVFinal_45_141 \12");
		
	};
	
	this.transition_DBV_AxBx__TO__DBVFinal_45_141 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AXBX).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AXBX, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBV_AxBx__TO__DBVFinal_45_141_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBVReading__TO__DBV_AxBx_109_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBVReading__TO__DBV_AxBx_109 \12");
		
	};
	
	this.transition_DBVReading__TO__DBV_AxBx_109 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBVReading__TO__DBV_AxBx_109_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AXBX, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBV_A__TO__DBVFinal_45_27_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBV_A__TO__DBVFinal_45_27 \12");
		
	};
	
	this.transition_DBV_A__TO__DBVFinal_45_27 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_A).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_A, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBV_A__TO__DBVFinal_45_27_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBV_AB__TO__DBVFinal_45_29_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBV_AB__TO__DBVFinal_45_29 \12");
		
	};
	
	this.transition_DBV_AB__TO__DBVFinal_45_29 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AB).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AB, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBV_AB__TO__DBVFinal_45_29_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBV_C__TO__DBVFinal_45_34_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBV_C__TO__DBVFinal_45_34 \12");
		
	};
	
	this.transition_DBV_C__TO__DBVFinal_45_34 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_C).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_C, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBV_C__TO__DBVFinal_45_34_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_DBVReading__TO__DBVFinal_45_142_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: DBVReading__TO__DBVFinal_45_142 \12");
		
	};
	
	this.transition_DBVReading__TO__DBVFinal_45_142 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_DBVReading__TO__DBVFinal_45_142_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_HousingReading__TO__Housing_EI_25_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: HousingReading__TO__Housing_EI_25 \12");
		
	};
	
	this.transition_HousingReading__TO__Housing_EI_25 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_HousingReading__TO__Housing_EI_25_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_HousingReading__TO__Housing_HA_22_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: HousingReading__TO__Housing_HA_22 \12");
		
	};
	
	this.transition_HousingReading__TO__Housing_HA_22 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_HousingReading__TO__Housing_HA_22_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Housing_EI__TO__HousingFinal_56_156_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Housing_EI__TO__HousingFinal_56_156 \12");
		
	};
	
	this.transition_Housing_EI__TO__HousingFinal_56_156 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Housing_EI__TO__HousingFinal_56_156_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGFINAL_56, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Housing_E__TO__HousingFinal_56_38_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Housing_E__TO__HousingFinal_56_38 \12");
		
	};
	
	this.transition_Housing_E__TO__HousingFinal_56_38 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Housing_E__TO__HousingFinal_56_38_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGFINAL_56, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Housing_HAUNF__TO__HousingFinal_56_37_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Housing_HAUNF__TO__HousingFinal_56_37 \12");
		
	};
	
	this.transition_Housing_HAUNF__TO__HousingFinal_56_37 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Housing_HAUNF__TO__HousingFinal_56_37_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGFINAL_56, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_HousingReading__TO__Housing_HAUNF_23_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: HousingReading__TO__Housing_HAUNF_23 \12");
		
	};
	
	this.transition_HousingReading__TO__Housing_HAUNF_23 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_HousingReading__TO__Housing_HAUNF_23_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_HousingInitial_17__TO__HousingReading_9_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: HousingInitial_17__TO__HousingReading_9 \12");
		
	};
	
	this.transition_HousingInitial_17__TO__HousingReading_9 = function(signal, submachineState)
	{
		this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING).incrementActiveCount();
		this.transition_HousingInitial_17__TO__HousingReading_9_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_HousingReading__TO__Housing_E_24_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: HousingReading__TO__Housing_E_24 \12");
		
	};
	
	this.transition_HousingReading__TO__Housing_E_24 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_HousingReading__TO__Housing_E_24_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Housing_HA__TO__HousingFinal_56_36_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Housing_HA__TO__HousingFinal_56_36 \12");
		
	};
	
	this.transition_Housing_HA__TO__HousingFinal_56_36 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Housing_HA__TO__HousingFinal_56_36_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGFINAL_56, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Housing_A__TO__HousingFinal_56_35_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Housing_A__TO__HousingFinal_56_35 \12");
		
	};
	
	this.transition_Housing_A__TO__HousingFinal_56_35 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Housing_A__TO__HousingFinal_56_35_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGFINAL_56, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_HousingReading__TO__Housing_A_19_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: HousingReading__TO__Housing_A_19 \12");
		
	};
	
	this.transition_HousingReading__TO__Housing_A_19 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_HousingReading__TO__Housing_A_19_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Magnet_S12__TO__MagnetFinal_217_171_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Magnet_S12__TO__MagnetFinal_217_171 \12");
		
	};
	
	this.transition_Magnet_S12__TO__MagnetFinal_217_171 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Magnet_S12__TO__MagnetFinal_217_171_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_217, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Magnet_X12__TO__MagnetFinal_106_136_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Magnet_X12__TO__MagnetFinal_106_136 \12");
		
	};
	
	this.transition_Magnet_X12__TO__MagnetFinal_106_136 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Magnet_X12__TO__MagnetFinal_106_136_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_106, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Magnet_G24__TO__MagnetFinal_106_92_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Magnet_G24__TO__MagnetFinal_106_92 \12");
		
	};
	
	this.transition_Magnet_G24__TO__MagnetFinal_106_92 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Magnet_G24__TO__MagnetFinal_106_92_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_106, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_MagnetReading__TO__Magnet_G24_90_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: MagnetReading__TO__Magnet_G24_90 \12");
		
	};
	
	this.transition_MagnetReading__TO__Magnet_G24_90 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_MagnetReading__TO__Magnet_G24_90_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Magnet_G24__TO__MagnetFinal_217_168_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Magnet_G24__TO__MagnetFinal_217_168 \12");
		
	};
	
	this.transition_Magnet_G24__TO__MagnetFinal_217_168 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Magnet_G24__TO__MagnetFinal_217_168_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_217, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_MagnetInitial_108__TO__MagnetReading_96_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: MagnetInitial_108__TO__MagnetReading_96 \12");
		
	};
	
	this.transition_MagnetInitial_108__TO__MagnetReading_96 = function(signal, submachineState)
	{
		this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET).incrementActiveCount();
		this.transition_MagnetInitial_108__TO__MagnetReading_96_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_MagnetReading__TO__Magnet_S12_150_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: MagnetReading__TO__Magnet_S12_150 \12");
		
	};
	
	this.transition_MagnetReading__TO__Magnet_S12_150 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_MagnetReading__TO__Magnet_S12_150_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Magnet_AMP24__TO__MagnetFinal_217_170_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Magnet_AMP24__TO__MagnetFinal_217_170 \12");
		
	};
	
	this.transition_Magnet_AMP24__TO__MagnetFinal_217_170 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Magnet_AMP24__TO__MagnetFinal_217_170_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_217, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_MagnetReading__TO__Magnet_AMP24_137_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: MagnetReading__TO__Magnet_AMP24_137 \12");
		
	};
	
	this.transition_MagnetReading__TO__Magnet_AMP24_137 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_MagnetReading__TO__Magnet_AMP24_137_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Magnet_S12__TO__MagnetFinal_106_151_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Magnet_S12__TO__MagnetFinal_106_151 \12");
		
	};
	
	this.transition_Magnet_S12__TO__MagnetFinal_106_151 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Magnet_S12__TO__MagnetFinal_106_151_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_106, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Magnet_AMP24__TO__MagnetFinal_106_138_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Magnet_AMP24__TO__MagnetFinal_106_138 \12");
		
	};
	
	this.transition_Magnet_AMP24__TO__MagnetFinal_106_138 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Magnet_AMP24__TO__MagnetFinal_106_138_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_106, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_Magnet_X12__TO__MagnetFinal_217_169_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: Magnet_X12__TO__MagnetFinal_217_169 \12");
		
	};
	
	this.transition_Magnet_X12__TO__MagnetFinal_217_169 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_Magnet_X12__TO__MagnetFinal_217_169_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_217, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_MagnetReading__TO__Magnet_X12_135_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: MagnetReading__TO__Magnet_X12_135 \12");
		
	};
	
	this.transition_MagnetReading__TO__Magnet_X12_135 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_MagnetReading__TO__Magnet_X12_135_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_MagnetReading__TO__MagnetFinal_106_139_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: MagnetReading__TO__MagnetFinal_106_139 \12");
		
	};
	
	this.transition_MagnetReading__TO__MagnetFinal_106_139 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_MagnetReading__TO__MagnetFinal_106_139_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_106, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCoverRoute__TO__SpringCoverFinal_215_164_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCoverRoute__TO__SpringCoverFinal_215_164 \12");
		
	};
	
	this.transition_SpringCoverRoute__TO__SpringCoverFinal_215_164 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCoverRoute__TO__SpringCoverFinal_215_164_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_215, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCover_A__TO__SpringCoverRoute_86_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCover_A__TO__SpringCoverRoute_86 \12");
		
	};
	
	this.transition_SpringCover_A__TO__SpringCoverRoute_86 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCover_A__TO__SpringCoverRoute_86_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCover_HA__TO__SpringCoverFinal_87_74_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCover_HA__TO__SpringCoverFinal_87_74 \12");
		
	};
	
	this.transition_SpringCover_HA__TO__SpringCoverFinal_87_74 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCover_HA__TO__SpringCoverFinal_87_74_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_87, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCover_WA__TO__SpringCoverRoute_113_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCover_WA__TO__SpringCoverRoute_113 \12");
		
	};
	
	this.transition_SpringCover_WA__TO__SpringCoverRoute_113 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCover_WA__TO__SpringCoverRoute_113_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCover_CAN__TO__SpringCoverRoute_115_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCover_CAN__TO__SpringCoverRoute_115 \12");
		
	};
	
	this.transition_SpringCover_CAN__TO__SpringCoverRoute_115 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCover_CAN__TO__SpringCoverRoute_115_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCoverReading__TO__SpringCover_HA_71_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCoverReading__TO__SpringCover_HA_71 \12");
		
	};
	
	this.transition_SpringCoverReading__TO__SpringCover_HA_71 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCoverReading__TO__SpringCover_HA_71_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCover_E__TO__SpringCoverRoute_117_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCover_E__TO__SpringCoverRoute_117 \12");
		
	};
	
	this.transition_SpringCover_E__TO__SpringCoverRoute_117 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCover_E__TO__SpringCoverRoute_117_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCover_HA__TO__SpringCoverRoute_87_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCover_HA__TO__SpringCoverRoute_87 \12");
		
	};
	
	this.transition_SpringCover_HA__TO__SpringCoverRoute_87 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCover_HA__TO__SpringCoverRoute_87_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCoverInitial_86__TO__SpringCoverReading_76_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCoverInitial_86__TO__SpringCoverReading_76 \12");
		
	};
	
	this.transition_SpringCoverInitial_86__TO__SpringCoverReading_76 = function(signal, submachineState)
	{
		this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER).incrementActiveCount();
		this.transition_SpringCoverInitial_86__TO__SpringCoverReading_76_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCover_HUNF__TO__SpringCoverRoute_111_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCover_HUNF__TO__SpringCoverRoute_111 \12");
		
	};
	
	this.transition_SpringCover_HUNF__TO__SpringCoverRoute_111 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCover_HUNF__TO__SpringCoverRoute_111_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCoverReading__TO__SpringCover_CAN_114_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCoverReading__TO__SpringCover_CAN_114 \12");
		
	};
	
	this.transition_SpringCoverReading__TO__SpringCover_CAN_114 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCoverReading__TO__SpringCover_CAN_114_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCoverReading__TO__SpringCover_WA_112_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCoverReading__TO__SpringCover_WA_112 \12");
		
	};
	
	this.transition_SpringCoverReading__TO__SpringCover_WA_112 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCoverReading__TO__SpringCover_WA_112_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCoverReading__TO__SpringCover_HUNF_110_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCoverReading__TO__SpringCover_HUNF_110 \12");
		
	};
	
	this.transition_SpringCoverReading__TO__SpringCover_HUNF_110 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCoverReading__TO__SpringCover_HUNF_110_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCover_A__TO__SpringCoverFinal_87_73_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCover_A__TO__SpringCoverFinal_87_73 \12");
		
	};
	
	this.transition_SpringCover_A__TO__SpringCoverFinal_87_73 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCover_A__TO__SpringCoverFinal_87_73_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_87, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCoverReading__TO__SpringCover_A_70_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCoverReading__TO__SpringCover_A_70 \12");
		
	};
	
	this.transition_SpringCoverReading__TO__SpringCover_A_70 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCoverReading__TO__SpringCover_A_70_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringCoverReading__TO__SpringCover_E_116_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringCoverReading__TO__SpringCover_E_116 \12");
		
	};
	
	this.transition_SpringCoverReading__TO__SpringCover_E_116 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringCoverReading__TO__SpringCover_E_116_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetReading__TO__SpringSet_H_43_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetReading__TO__SpringSet_H_43 \12");
		
	};
	
	this.transition_SpringSetReading__TO__SpringSet_H_43 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetReading__TO__SpringSet_H_43_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetReading__TO__SpringSet_CAN_44_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetReading__TO__SpringSet_CAN_44 \12");
		
	};
	
	this.transition_SpringSetReading__TO__SpringSet_CAN_44 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetReading__TO__SpringSet_CAN_44_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSet_CAN__TO__SpringSetFinal_60_47_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSet_CAN__TO__SpringSetFinal_60_47 \12");
		
	};
	
	this.transition_SpringSet_CAN__TO__SpringSetFinal_60_47 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSet_CAN__TO__SpringSetFinal_60_47_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETFINAL_60, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSet_A__TO__SpringSetFinal_60_122_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSet_A__TO__SpringSetFinal_60_122 \12");
		
	};
	
	this.transition_SpringSet_A__TO__SpringSetFinal_60_122 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSet_A__TO__SpringSetFinal_60_122_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETFINAL_60, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetInitial_59__TO__SpringSetReading_40_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetInitial_59__TO__SpringSetReading_40 \12");
		
	};
	
	this.transition_SpringSetInitial_59__TO__SpringSetReading_40 = function(signal, submachineState)
	{
		this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET).incrementActiveCount();
		this.transition_SpringSetInitial_59__TO__SpringSetReading_40_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSet_E__TO__SpringSetFinal_60_41_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSet_E__TO__SpringSetFinal_60_41 \12");
		
	};
	
	this.transition_SpringSet_E__TO__SpringSetFinal_60_41 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSet_E__TO__SpringSetFinal_60_41_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETFINAL_60, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetReading__TO__SpringSet_A_121_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetReading__TO__SpringSet_A_121 \12");
		
	};
	
	this.transition_SpringSetReading__TO__SpringSet_A_121 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetReading__TO__SpringSet_A_121_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSet_H__TO__SpringSetFinal_60_46_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSet_H__TO__SpringSetFinal_60_46 \12");
		
	};
	
	this.transition_SpringSet_H__TO__SpringSetFinal_60_46 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSet_H__TO__SpringSetFinal_60_46_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETFINAL_60, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetReading__TO__SpringSet_E_42_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetReading__TO__SpringSet_E_42 \12");
		
	};
	
	this.transition_SpringSetReading__TO__SpringSet_E_42 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetReading__TO__SpringSet_E_42_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetScrew_WA__TO__SpringSetScrewRoute_78_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetScrew_WA__TO__SpringSetScrewRoute_78 \12");
		
	};
	
	this.transition_SpringSetScrew_WA__TO__SpringSetScrewRoute_78 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetScrew_WA__TO__SpringSetScrewRoute_78_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetScrew_A__TO__SpringSetScrewRoute_77_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetScrew_A__TO__SpringSetScrewRoute_77 \12");
		
	};
	
	this.transition_SpringSetScrew_A__TO__SpringSetScrewRoute_77 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetScrew_A__TO__SpringSetScrewRoute_77_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetScrewRoute__TO__SpringSetScrewFinal_214_163_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetScrewRoute__TO__SpringSetScrewFinal_214_163 \12");
		
	};
	
	this.transition_SpringSetScrewRoute__TO__SpringSetScrewFinal_214_163 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetScrewRoute__TO__SpringSetScrewFinal_214_163_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWFINAL_214, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetScrew_CAN__TO__SpringSetScrewRoute_79_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetScrew_CAN__TO__SpringSetScrewRoute_79 \12");
		
	};
	
	this.transition_SpringSetScrew_CAN__TO__SpringSetScrewRoute_79 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetScrew_CAN__TO__SpringSetScrewRoute_79_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetScrewReading__TO__SpringSetScrew_CAN_147_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetScrewReading__TO__SpringSetScrew_CAN_147 \12");
		
	};
	
	this.transition_SpringSetScrewReading__TO__SpringSetScrew_CAN_147 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetScrewReading__TO__SpringSetScrew_CAN_147_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetScrewInitial_69__TO__SpringSetScrewReading_59_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetScrewInitial_69__TO__SpringSetScrewReading_59 \12");
		
	};
	
	this.transition_SpringSetScrewInitial_69__TO__SpringSetScrewReading_59 = function(signal, submachineState)
	{
		this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW).incrementActiveCount();
		this.transition_SpringSetScrewInitial_69__TO__SpringSetScrewReading_59_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetScrewReading__TO__SpringSetScrew_A_145_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetScrewReading__TO__SpringSetScrew_A_145 \12");
		
	};
	
	this.transition_SpringSetScrewReading__TO__SpringSetScrew_A_145 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetScrewReading__TO__SpringSetScrew_A_145_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_SpringSetScrewReading__TO__SpringSetScrew_WA_146_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: SpringSetScrewReading__TO__SpringSetScrew_WA_146 \12");
		
	};
	
	this.transition_SpringSetScrewReading__TO__SpringSetScrew_WA_146 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_SpringSetScrewReading__TO__SpringSetScrew_WA_146_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_WVReading__TO__WV_W3_82_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: WVReading__TO__WV_W3_82 \12");
		
	};
	
	this.transition_WVReading__TO__WV_W3_82 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_WVReading__TO__WV_W3_82_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W3, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_WVReading__TO__WVRoute_140_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: WVReading__TO__WVRoute_140 \12");
		
	};
	
	this.transition_WVReading__TO__WVRoute_140 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_WVReading__TO__WVRoute_140_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_WV_W3__TO__WVRoute_84_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: WV_W3__TO__WVRoute_84 \12");
		
	};
	
	this.transition_WV_W3__TO__WVRoute_84 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W3).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W3, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_WV_W3__TO__WVRoute_84_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_InitialWV_107__TO__WVReading_95_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: InitialWV_107__TO__WVReading_95 \12");
		
	};
	
	this.transition_InitialWV_107__TO__WVReading_95 = function(signal, submachineState)
	{
		this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV).incrementActiveCount();
		this.transition_InitialWV_107__TO__WVReading_95_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_WVRoute__TO__WVFinal_218_167_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: WVRoute__TO__WVFinal_218_167 \12");
		
	};
	
	this.transition_WVRoute__TO__WVFinal_218_167 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_WVRoute__TO__WVFinal_218_167_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVFINAL_218, submachineState, StateBehaviorEnum.ENTRY, null, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_WV_W1__TO__WVRoute_120_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: WV_W1__TO__WVRoute_120 \12");
		
	};
	
	this.transition_WV_W1__TO__WVRoute_120 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W1).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W1, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_WV_W1__TO__WVRoute_120_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_WVReading__TO__WV_standard_81_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: WVReading__TO__WV_standard_81 \12");
		
	};
	
	this.transition_WVReading__TO__WV_standard_81 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_WVReading__TO__WV_standard_81_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_STANDARD, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_WV_standard__TO__WVRoute_83_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: WV_standard__TO__WVRoute_83 \12");
		
	};
	
	this.transition_WV_standard__TO__WVRoute_83 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WV_STANDARD).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_STANDARD, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_WV_standard__TO__WVRoute_83_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.transition_WVReading__TO__WV_W1_119_effect = function(signal) 
	{
		trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Transition Effect: WVReading__TO__WV_W1_119 \12");
		
	};
	
	this.transition_WVReading__TO__WV_W1_119 = function(signal, submachineState)
	{
		if(!this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING).isActiveState())
		{
			return;
		}
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null);
		this.transition_WVReading__TO__WV_W1_119_effect(signal);
		this.base.currentTransition.setTransitionActive(this.base);
		this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W1, submachineState, StateBehaviorEnum.ENTRY, signal, EntryTypeEnum.DefaultEntry, null);
	};
	this.stateProc = function(state, submachineState, behavior, signal, enumEntryType, entryArray)
	{
		switch (state) 
		{
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER:
					return this.stateProc_StateMachine_Controller(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_DBV:
					return this.stateProc_StateMachine_DBV(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING:
					return this.stateProc_StateMachine_Housing(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET:
					return this.stateProc_StateMachine_Magnet(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_PARSING:
					return this.stateProc_StateMachine_Parsing(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER:
					return this.stateProc_StateMachine_SpringCover(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET:
					return this.stateProc_StateMachine_SpringSet(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW:
					return this.stateProc_StateMachine_SpringSetScrew(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_WAITING:
					return this.stateProc_StateMachine_Waiting(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_WV:
					return this.stateProc_StateMachine_WV(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLFINAL_216:
					return this.stateProc_StateMachine_Controller_ControlFinal_216(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING:
					return this.stateProc_StateMachine_Controller_ControllerSpringReading(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2:
					return this.stateProc_StateMachine_Controller_Spring2(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5:
					return this.stateProc_StateMachine_Controller_Spring5(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7:
					return this.stateProc_StateMachine_Controller_Spring7(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9:
					return this.stateProc_StateMachine_Controller_Spring9(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING:
					return this.stateProc_StateMachine_Controller_ControllerReading(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE:
					return this.stateProc_StateMachine_Controller_ControllerRoute(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81:
					return this.stateProc_StateMachine_Controller_Controller_81(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D:
					return this.stateProc_StateMachine_Controller_Controller_D(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E:
					return this.stateProc_StateMachine_Controller_Controller_E(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I:
					return this.stateProc_StateMachine_Controller_Controller_I(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L:
					return this.stateProc_StateMachine_Controller_Controller_L(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD:
					return this.stateProc_StateMachine_Controller_Controller_standard(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45:
					return this.stateProc_StateMachine_DBV_DBVFinal_45(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING:
					return this.stateProc_StateMachine_DBV_DBVReading(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_A:
					return this.stateProc_StateMachine_DBV_DBV_A(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AB:
					return this.stateProc_StateMachine_DBV_DBV_AB(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AXBX:
					return this.stateProc_StateMachine_DBV_DBV_AxBx(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_B:
					return this.stateProc_StateMachine_DBV_DBV_B(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_C:
					return this.stateProc_StateMachine_DBV_DBV_C(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGFINAL_56:
					return this.stateProc_StateMachine_Housing_HousingFinal_56(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING:
					return this.stateProc_StateMachine_Housing_HousingReading(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E:
					return this.stateProc_StateMachine_Housing_Housing_E(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI:
					return this.stateProc_StateMachine_Housing_Housing_EI(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF:
					return this.stateProc_StateMachine_Housing_Housing_HAUNF(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A:
					return this.stateProc_StateMachine_Housing_Housing_A(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA:
					return this.stateProc_StateMachine_Housing_Housing_HA(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_106:
					return this.stateProc_StateMachine_Magnet_MagnetFinal_106(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_217:
					return this.stateProc_StateMachine_Magnet_MagnetFinal_217(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12:
					return this.stateProc_StateMachine_Magnet_Magnet_S12(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING:
					return this.stateProc_StateMachine_Magnet_MagnetReading(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24:
					return this.stateProc_StateMachine_Magnet_Magnet_AMP24(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24:
					return this.stateProc_StateMachine_Magnet_Magnet_G24(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12:
					return this.stateProc_StateMachine_Magnet_Magnet_X12(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_87:
					return this.stateProc_StateMachine_SpringCover_SpringCoverFinal_87(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_215:
					return this.stateProc_StateMachine_SpringCover_SpringCoverFinal_215(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING:
					return this.stateProc_StateMachine_SpringCover_SpringCoverReading(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE:
					return this.stateProc_StateMachine_SpringCover_SpringCoverRoute(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A:
					return this.stateProc_StateMachine_SpringCover_SpringCover_A(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN:
					return this.stateProc_StateMachine_SpringCover_SpringCover_CAN(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E:
					return this.stateProc_StateMachine_SpringCover_SpringCover_E(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA:
					return this.stateProc_StateMachine_SpringCover_SpringCover_HA(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF:
					return this.stateProc_StateMachine_SpringCover_SpringCover_HUNF(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA:
					return this.stateProc_StateMachine_SpringCover_SpringCover_WA(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETFINAL_60:
					return this.stateProc_StateMachine_SpringSet_SpringSetFinal_60(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING:
					return this.stateProc_StateMachine_SpringSet_SpringSetReading(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A:
					return this.stateProc_StateMachine_SpringSet_SpringSet_A(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN:
					return this.stateProc_StateMachine_SpringSet_SpringSet_CAN(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E:
					return this.stateProc_StateMachine_SpringSet_SpringSet_E(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H:
					return this.stateProc_StateMachine_SpringSet_SpringSet_H(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWFINAL_214:
					return this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewFinal_214(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE:
					return this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewRoute(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING:
					return this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewReading(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A:
					return this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_A(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN:
					return this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_CAN(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA:
					return this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_WA(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_WV_WVFINAL_218:
					return this.stateProc_StateMachine_WV_WVFinal_218(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE:
					return this.stateProc_StateMachine_WV_WVRoute(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING:
					return this.stateProc_StateMachine_WV_WVReading(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_WV_WV_STANDARD:
					return this.stateProc_StateMachine_WV_WV_standard(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W1:
					return this.stateProc_StateMachine_WV_WV_W1(behavior, submachineState, signal, enumEntryType, entryArray);
	
				case StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W3:
					return this.stateProc_StateMachine_WV_WV_W3(behavior, submachineState, signal, enumEntryType, entryArray);
		}
		return false;
	};
	this.stateProc_StateMachine_Controller = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_behavior(StateBehaviorEnum.DO, signal);
			
				var entrys = [];
				if(enumEntryType == EntryTypeEnum.DefaultEntry)
				{
					var entryArrayTemp = [EntryEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERINITIAL_115];
					for (var i = 0; i < entryArrayTemp.length; i++)
						entrys.push(entryArrayTemp[i]);
				}
				else
				{
					if(entryArray != null)
					{
						for (var i = 0; i < entryArray.length; i++)
							entrys.push(entryArray[i]);
					}
				}
				for(var i = 0; i < entrys.length; i++)
				{
					switch(entrys[i])
					{
					case EntryEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERINITIAL_115:
		
						this.transitionProc(TransitionEnum.Production_ENUM_CONTROLLERINITIAL_115__TO__CONTROLLERREADING_101, signal, submachineState);
						break;
					}
				}
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
		
				if(state.active_count > 1)
				{
					//DeActive Region Controller
					if(this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null))
						state.decrementActiveCount();
				}
				this.m_statemachine = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller \12");
				this.assemblyData.push({"groupName": "Controller", "actionList": []});
				console.log("----- Controller -----");
				console.log("Group Name: "+this.assemblyData[this.assemblyData.length-1].groupName);
				console.log("Action List: "+this.assemblyData[this.assemblyData.length-1].actionList);
				console.log("------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_DBV = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine = StateEnum.Production_ENUM_STATEMACHINE_DBV;
				state.incrementActiveCount();
				this.stateProc_StateMachine_DBV_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_DBV_behavior(StateBehaviorEnum.DO, signal);
			
				var entrys = [];
				if(enumEntryType == EntryTypeEnum.DefaultEntry)
				{
					var entryArrayTemp = [EntryEnum.Production_ENUM_STATEMACHINE_DBV_DBVINITIAL_44];
					for (var i = 0; i < entryArrayTemp.length; i++)
						entrys.push(entryArrayTemp[i]);
				}
				else
				{
					if(entryArray != null)
					{
						for (var i = 0; i < entryArray.length; i++)
							entrys.push(entryArray[i]);
					}
				}
				for(var i = 0; i < entrys.length; i++)
				{
					switch(entrys[i])
					{
					case EntryEnum.Production_ENUM_STATEMACHINE_DBV_DBVINITIAL_44:
		
						this.transitionProc(TransitionEnum.Production_ENUM_DBVINITIAL_44__TO__DBVREADING_33, signal, submachineState);
						break;
					}
				}
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
		
				if(state.active_count > 1)
				{
					//DeActive Region DBV
					if(this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_A, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AB, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AXBX, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_B, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_C, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null))
						state.decrementActiveCount();
				}
				this.m_statemachine = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_DBV_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_DBV_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_DBV \12");
				// Pushing Group
				this.assemblyData.push({"groupName": "DBV", "actionList": []});
				console.log("----- DBV -----");
				console.log("Group Name: "+this.assemblyData[this.assemblyData.length-1].groupName);
				console.log("Action List: "+this.assemblyData[this.assemblyData.length-1].actionList);
				console.log("------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_DBV \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_DBV \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Housing = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine = StateEnum.Production_ENUM_STATEMACHINE_HOUSING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Housing_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Housing_behavior(StateBehaviorEnum.DO, signal);
			
				var entrys = [];
				if(enumEntryType == EntryTypeEnum.DefaultEntry)
				{
					var entryArrayTemp = [EntryEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGINITIAL_17];
					for (var i = 0; i < entryArrayTemp.length; i++)
						entrys.push(entryArrayTemp[i]);
				}
				else
				{
					if(entryArray != null)
					{
						for (var i = 0; i < entryArray.length; i++)
							entrys.push(entryArray[i]);
					}
				}
				for(var i = 0; i < entrys.length; i++)
				{
					switch(entrys[i])
					{
					case EntryEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGINITIAL_17:
		
						this.transitionProc(TransitionEnum.Production_ENUM_HOUSINGINITIAL_17__TO__HOUSINGREADING_9, signal, submachineState);
						break;
					}
				}
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
		
				if(state.active_count > 1)
				{
					//DeActive Region Housing
					if(this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null))
						state.decrementActiveCount();
				}
				this.m_statemachine = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Housing_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Housing_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Housing \12");
				this.assemblyData.push({"groupName": "Housing", "actionList": []});
				console.log("----- HOUSING -----");
				console.log("Group Name: "+this.assemblyData[this.assemblyData.length-1].groupName);
				console.log("Action List: "+this.assemblyData[this.assemblyData.length-1].actionList);
				console.log("------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Housing \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Housing \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Magnet = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine = StateEnum.Production_ENUM_STATEMACHINE_MAGNET;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Magnet_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Magnet_behavior(StateBehaviorEnum.DO, signal);
			
				var entrys = [];
				if(enumEntryType == EntryTypeEnum.DefaultEntry)
				{
					var entryArrayTemp = [EntryEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETINITIAL_108];
					for (var i = 0; i < entryArrayTemp.length; i++)
						entrys.push(entryArrayTemp[i]);
				}
				else
				{
					if(entryArray != null)
					{
						for (var i = 0; i < entryArray.length; i++)
							entrys.push(entryArray[i]);
					}
				}
				for(var i = 0; i < entrys.length; i++)
				{
					switch(entrys[i])
					{
					case EntryEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETINITIAL_108:
		
						this.transitionProc(TransitionEnum.Production_ENUM_MAGNETINITIAL_108__TO__MAGNETREADING_96, signal, submachineState);
						break;
					}
				}
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
		
				if(state.active_count > 1)
				{
					//DeActive Region Magnet
					if(this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null))
						state.decrementActiveCount();
				}
				this.m_statemachine = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Magnet_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Magnet_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Magnet \12");
				this.assemblyData.push({"groupName": "Magnet", "actionList": []});
				console.log("----- Magnet-----");
				console.log("Group Name: "+this.assemblyData[this.assemblyData.length-1].groupName);
				console.log("Action List: "+this.assemblyData[this.assemblyData.length-1].actionList);
				console.log("------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Magnet \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Magnet \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Parsing = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_PARSING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine = StateEnum.Production_ENUM_STATEMACHINE_PARSING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Parsing_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Parsing_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Parsing_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Parsing_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Parsing \12");
				console.log("Inserted type code: "+this.typeCode);
				console.log("Tokenization");
				this.tokens = Array(19).fill('');
				// Alternative syntax using RegExp constructor
				let regex = new RegExp('[ ]*\\-[ ]*(D|E|I|L|81|\\-)?[ ]*(2|5|7|9|\\-)?[ ]*(AB|A|\\-)?[ ]*([\\d]*)[ ]*(B|\\-)?[ ]*([\\d]*)[ ]*(C)?([\\d]*)[ ]*([W\\d]*)[ ]*\\/[ ]*(E|E0|\\-)?[ ]*(P|\\-)?[ ]*(EOZ|H|F|T|\\-)?[ ]*(A|C|D|\\-)?[ ]*(I|M|MM|\\-)?[ ]*(7|8|9|\\-)?[ ]*(UNF|\\-)?[ ]*(G|S|D|VCH|WA|UNF|CAN|CANL|\\-)?[ ]*\\-(G24|X12|AMP24|S12|\\-)?', 'gm')
				let str = this.typeCode;
				let m;
				while ((m = regex.exec(str)) !== null) {
				// This is necessary to avoid infinite loops with zero-width matches
				if (m.index === regex.lastIndex) {
				regex.lastIndex++;
				}
				
				// The result can be accessed through the `m`-variable.
				m.forEach((match, groupIndex) => {
				// console.log(`${groupIndex}: ${match}`);
				this.tokens[groupIndex] = match;
				});
				}
				console.log("------- PARSER -------");
				for(let i=0; i<this.tokens.length; i++)
				{
				if(this.tokens[i] == undefined)
				{
				this.tokens[i] = '';
				}
				console.log(i+": "+this.tokens[i]);
				}
				console.log("----------------------");
				// typeCode check
				// default for the guard is true, set in the waiting state
				let emptyCounter = 0;
				for(let i=0; i<this.tokens.length; i++)
				{
				if(this.tokens[i] == '')
				{
				emptyCounter++;
				}
				}
				if (emptyCounter == this.tokens.length)
				{
				this.typeCodeCheck=false;
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Parsing \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Parsing \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringCover = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine = StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringCover_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringCover_behavior(StateBehaviorEnum.DO, signal);
			
				var entrys = [];
				if(enumEntryType == EntryTypeEnum.DefaultEntry)
				{
					var entryArrayTemp = [EntryEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERINITIAL_86];
					for (var i = 0; i < entryArrayTemp.length; i++)
						entrys.push(entryArrayTemp[i]);
				}
				else
				{
					if(entryArray != null)
					{
						for (var i = 0; i < entryArray.length; i++)
							entrys.push(entryArray[i]);
					}
				}
				for(var i = 0; i < entrys.length; i++)
				{
					switch(entrys[i])
					{
					case EntryEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERINITIAL_86:
		
						this.transitionProc(TransitionEnum.Production_ENUM_SPRINGCOVERINITIAL_86__TO__SPRINGCOVERREADING_76, signal, submachineState);
						break;
					}
				}
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
		
				if(state.active_count > 1)
				{
					//DeActive Region SpringCover
					if(this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null))
						state.decrementActiveCount();
				}
				this.m_statemachine = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringCover_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringCover_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringCover \12");
				this.assemblyData.push({"groupName": "SpringCover", "actionList": []});
				console.log("----- SpringCover-----");
				console.log("Group Name: "+this.assemblyData[this.assemblyData.length-1].groupName);
				console.log("Action List: "+this.assemblyData[this.assemblyData.length-1].actionList);
				console.log("------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringCover \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringCover \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSet = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSet_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSet_behavior(StateBehaviorEnum.DO, signal);
			
				var entrys = [];
				if(enumEntryType == EntryTypeEnum.DefaultEntry)
				{
					var entryArrayTemp = [EntryEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETINITIAL_59];
					for (var i = 0; i < entryArrayTemp.length; i++)
						entrys.push(entryArrayTemp[i]);
				}
				else
				{
					if(entryArray != null)
					{
						for (var i = 0; i < entryArray.length; i++)
							entrys.push(entryArray[i]);
					}
				}
				for(var i = 0; i < entrys.length; i++)
				{
					switch(entrys[i])
					{
					case EntryEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETINITIAL_59:
		
						this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETINITIAL_59__TO__SPRINGSETREADING_40, signal, submachineState);
						break;
					}
				}
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
		
				if(state.active_count > 1)
				{
					//DeActive Region SpringSet
					if(this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null))
						state.decrementActiveCount();
				}
				this.m_statemachine = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSet_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSet_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSet \12");
				this.assemblyData.push({"groupName": "SpringSet", "actionList": []});
				console.log("----- SpringSet-----");
				console.log("Group Name: "+this.assemblyData[this.assemblyData.length-1].groupName);
				console.log("Action List: "+this.assemblyData[this.assemblyData.length-1].actionList);
				console.log("------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSet \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSet \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSetScrew = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSetScrew_behavior(StateBehaviorEnum.DO, signal);
			
				var entrys = [];
				if(enumEntryType == EntryTypeEnum.DefaultEntry)
				{
					var entryArrayTemp = [EntryEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWINITIAL_69];
					for (var i = 0; i < entryArrayTemp.length; i++)
						entrys.push(entryArrayTemp[i]);
				}
				else
				{
					if(entryArray != null)
					{
						for (var i = 0; i < entryArray.length; i++)
							entrys.push(entryArray[i]);
					}
				}
				for(var i = 0; i < entrys.length; i++)
				{
					switch(entrys[i])
					{
					case EntryEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWINITIAL_69:
		
						this.transitionProc(TransitionEnum.Production_ENUM_SPRINGSETSCREWINITIAL_69__TO__SPRINGSETSCREWREADING_59, signal, submachineState);
						break;
					}
				}
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
		
				if(state.active_count > 1)
				{
					//DeActive Region SpringSetScrew
					if(this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null))
						state.decrementActiveCount();
				}
				this.m_statemachine = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSetScrew_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSetScrew \12");
				this.assemblyData.push({"groupName": "SpringSetScrew", "actionList": []});
				console.log("----- SpringSetScrew-----");
				console.log("Group Name: "+this.assemblyData[this.assemblyData.length-1].groupName);
				console.log("Action List: "+this.assemblyData[this.assemblyData.length-1].actionList);
				console.log("------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSetScrew \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSetScrew \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Waiting = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WAITING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine = StateEnum.Production_ENUM_STATEMACHINE_WAITING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Waiting_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Waiting_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Waiting_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Waiting_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Waiting \12");
				this.typeCode = "";
				this.tokens = Array(19).fill('');
				this.assemblyData = [];
				this.typeCodeCheck = true;
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Waiting \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Waiting \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_WV = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine = StateEnum.Production_ENUM_STATEMACHINE_WV;
				state.incrementActiveCount();
				this.stateProc_StateMachine_WV_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_WV_behavior(StateBehaviorEnum.DO, signal);
			
				var entrys = [];
				if(enumEntryType == EntryTypeEnum.DefaultEntry)
				{
					var entryArrayTemp = [EntryEnum.Production_ENUM_STATEMACHINE_WV_INITIALWV_107];
					for (var i = 0; i < entryArrayTemp.length; i++)
						entrys.push(entryArrayTemp[i]);
				}
				else
				{
					if(entryArray != null)
					{
						for (var i = 0; i < entryArray.length; i++)
							entrys.push(entryArray[i]);
					}
				}
				for(var i = 0; i < entrys.length; i++)
				{
					switch(entrys[i])
					{
					case EntryEnum.Production_ENUM_STATEMACHINE_WV_INITIALWV_107:
		
						this.transitionProc(TransitionEnum.Production_ENUM_INITIALWV_107__TO__WVREADING_95, signal, submachineState);
						break;
					}
				}
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
		
				if(state.active_count > 1)
				{
					//DeActive Region WV
					if(this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_STANDARD, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W1, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null) || this.stateProc(StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W3, submachineState, StateBehaviorEnum.EXIT, null, EntryTypeEnum.DefaultEntry, null))
						state.decrementActiveCount();
				}
				this.m_statemachine = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_WV_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_WV_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_WV \12");
				this.assemblyData.push({"groupName": "WV", "actionList": []});
				console.log("----- WV-----");
				console.log("Group Name: "+this.assemblyData[this.assemblyData.length-1].groupName);
				console.log("Action List: "+this.assemblyData[this.assemblyData.length-1].actionList);
				console.log("------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_WV \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_WV \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_ControlFinal_216 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		
		var  state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLFINAL_216);
		state.parent_state.decrementActiveCount();
		if (state.parent_state.isActiveState())
			this.base.deferInternalEvent(EventEnum.COMPLETION, null, state.parent_state);
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_ControllerSpringReading = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERSPRINGREADING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_ControllerSpringReading_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_ControllerSpringReading_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_ControllerSpringReading_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_ControllerSpringReading_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_ControllerSpringReading \12");
				switch(this.tokens[2])
				{
				case '2':
				this.guard = "Spring2";
				break;
				case '5':
				this.guard = "Spring5";
				break;
				case '7':
				this.guard = "Spring7";
				break;
				case '9':
				this.guard = "Spring9";
				break;
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_ControllerSpringReading \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_ControllerSpringReading \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_Spring2 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING2;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_Spring2_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_Spring2_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_Spring2_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_Spring2_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_Spring2 \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "2", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- ControllerSpring/2  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_Spring2 \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_Spring2 \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_Spring5 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING5;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_Spring5_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_Spring5_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_Spring5_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_Spring5_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_Spring5 \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "5", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- ControllerSpring/5  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_Spring5 \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_Spring5 \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_Spring7 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING7;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_Spring7_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_Spring7_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_Spring7_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_Spring7_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_Spring7 \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "7", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- ControllerSpring/7  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_Spring7 \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_Spring7 \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_Spring9 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_SPRING9;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_Spring9_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_Spring9_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_Spring9_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_Spring9_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_Spring9 \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "9", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- ControllerSpring/9  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_Spring9 \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_Spring9 \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_ControllerReading = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERREADING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_ControllerReading_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_ControllerReading_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_ControllerReading_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_ControllerReading_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_ControllerReading \12");
				switch(this.tokens[1])
				{
				case 'D':
				this.guard = "Controller_D";
				break;
				case 'E':
				this.guard = "Controller_E";
				break;
				case 'I':
				this.guard = "Controller_I";
				break;
				case 'L':
				this.guard = "Controller_L";
				break;
				case '81':
				this.guard = "Controller_81";
				break;
				default:
				this.guard = "Controller_standard";
				break;
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_ControllerReading \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_ControllerReading \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_ControllerRoute = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLERROUTE;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_ControllerRoute_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_ControllerRoute_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_ControllerRoute_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_ControllerRoute_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_ControllerRoute \12");
				if (this.tokens[10] == 'E0' && this.tokens[17] == 'CAN' ||
				this.tokens[1] == 'L' ||
				this.tokens[1] == 'I')
				{
				this.guard = "Controller_Magnet";
				} else if (this.tokens[10] == 'E' && this.tokens[13] == 'A')
				{
				this.guard = "Controller_WV";
				} else
				{
				this.guard = "Controller_SpringCover";
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_ControllerRoute \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_ControllerRoute \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_Controller_81 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_81;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_81_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_Controller_81_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_81_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_Controller_81_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_Controller_81 \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "81", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- Controller/81  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_Controller_81 \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_Controller_81 \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_Controller_D = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_D;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_D_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_Controller_D_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_D_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_Controller_D_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_Controller_D \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "D", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- Controller/D  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_Controller_D \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_Controller_D \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_Controller_E = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_E;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_E_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_Controller_E_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_E_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_Controller_E_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_Controller_E \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "E", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- Controller/E  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_Controller_E \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_Controller_E \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_Controller_I = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_I;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_I_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_Controller_I_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_I_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_Controller_I_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_Controller_I \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "I", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- Controller/I  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_Controller_I \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_Controller_I \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_Controller_L = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_L;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_L_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_Controller_L_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_L_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_Controller_L_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_Controller_L \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "L", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- Controller/L  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_Controller_L \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_Controller_L \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Controller_Controller_standard = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_controller = StateEnum.Production_ENUM_STATEMACHINE_CONTROLLER_CONTROLLER_STANDARD;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_standard_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Controller_Controller_standard_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_controller = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Controller_Controller_standard_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Controller_Controller_standard_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Controller_Controller_standard \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "standard", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- Controller/-  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Controller_Controller_standard \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Controller_Controller_standard \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_DBV_DBVFinal_45 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		
		var  state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVFINAL_45);
		state.parent_state.decrementActiveCount();
		if (state.parent_state.isActiveState())
			this.base.deferInternalEvent(EventEnum.COMPLETION, null, state.parent_state);
		
		return true;
	};
	
	this.stateProc_StateMachine_DBV_DBVReading = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_dbv = StateEnum.Production_ENUM_STATEMACHINE_DBV_DBVREADING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_DBV_DBVReading_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_DBV_DBVReading_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_dbv = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_DBV_DBVReading_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_DBV_DBVReading_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_DBV_DBVReading \12");
				switch(this.tokens[3]+' '+this.tokens[5]+' '+this.tokens[7])
				{
				case 'A  ':
				this.guard = "DBV_A";
				break;
				case ' B ':
				this.guard = "DBV_B";
				break;
				case 'AB  ':
				this.guard = "DBV_AB";
				break;
				case 'A B ':
				this.guard = "DBV_AxBx";
				break;
				case '  C':
				this.guard = "DBV_C";
				break;
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_DBV_DBVReading \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_DBV_DBVReading \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_DBV_DBV_A = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_A);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_dbv = StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_A;
				state.incrementActiveCount();
				this.stateProc_StateMachine_DBV_DBV_A_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_DBV_DBV_A_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_dbv = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_DBV_DBV_A_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_DBV_DBV_A_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_DBV_DBV_A \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "A", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- DBV/A -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_DBV_DBV_A \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_DBV_DBV_A \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_DBV_DBV_AB = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AB);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_dbv = StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AB;
				state.incrementActiveCount();
				this.stateProc_StateMachine_DBV_DBV_AB_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_DBV_DBV_AB_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_dbv = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_DBV_DBV_AB_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_DBV_DBV_AB_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_DBV_DBV_AB \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "AB", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- DBV/AB -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_DBV_DBV_AB \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_DBV_DBV_AB \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_DBV_DBV_AxBx = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AXBX);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_dbv = StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_AXBX;
				state.incrementActiveCount();
				this.stateProc_StateMachine_DBV_DBV_AxBx_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_DBV_DBV_AxBx_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_dbv = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_DBV_DBV_AxBx_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_DBV_DBV_AxBx_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_DBV_DBV_AxBx \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "AxBx", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- DBV/AxBx -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_DBV_DBV_AxBx \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_DBV_DBV_AxBx \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_DBV_DBV_B = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_B);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_dbv = StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_B;
				state.incrementActiveCount();
				this.stateProc_StateMachine_DBV_DBV_B_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_DBV_DBV_B_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_dbv = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_DBV_DBV_B_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_DBV_DBV_B_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_DBV_DBV_B \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "B", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.data[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- DBV/B -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_DBV_DBV_B \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_DBV_DBV_B \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_DBV_DBV_C = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_C);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_dbv = StateEnum.Production_ENUM_STATEMACHINE_DBV_DBV_C;
				state.incrementActiveCount();
				this.stateProc_StateMachine_DBV_DBV_C_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_DBV_DBV_C_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_dbv = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_DBV_DBV_C_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_DBV_DBV_C_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_DBV_DBV_C \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "C", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- DBV/C -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_DBV_DBV_C \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_DBV_DBV_C \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Housing_HousingFinal_56 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		
		var  state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGFINAL_56);
		state.parent_state.decrementActiveCount();
		if (state.parent_state.isActiveState())
			this.base.deferInternalEvent(EventEnum.COMPLETION, null, state.parent_state);
		
		return true;
	};
	
	this.stateProc_StateMachine_Housing_HousingReading = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_housing = StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSINGREADING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Housing_HousingReading_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Housing_HousingReading_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_housing = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Housing_HousingReading_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Housing_HousingReading_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Housing_HousingReading \12");
				// console.log("Housing token: "+this.tokens[10]+this.tokens[11]+this.tokens[12]+this.tokens[13]+this.tokens[14]+this.tokens[15]+this.tokens[16]);
				switch (this.tokens[10]+this.tokens[11]+this.tokens[12]+this.tokens[13]+this.tokens[14]+this.tokens[15]+this.tokens[16]) {
				case 'EA':
				this.guard='Housing_A';
				break;
				case 'EHA':
				case 'EAM':
				this.guard='Housing_HA';
				break;
				case 'EHAUNF':
				case 'EAMUNF':
				this.guard='Housing_HAUNF';
				break;
				case 'E':
				case 'EHUNF':
				this.guard='Housing_E';
				break;
				case 'EI':
				this.guard='Housing_EI';
				break;
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Housing_HousingReading \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Housing_HousingReading \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Housing_Housing_E = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_housing = StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_E;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Housing_Housing_E_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Housing_Housing_E_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_housing = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Housing_Housing_E_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Housing_Housing_E_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Housing_Housing_E \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "E", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("Assembly step 1", "Assembly step 2", "Assembly step 3");
				console.log("----- HOUSING/E -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Housing_Housing_E \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Housing_Housing_E \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Housing_Housing_EI = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_housing = StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_EI;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Housing_Housing_EI_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Housing_Housing_EI_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_housing = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Housing_Housing_EI_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Housing_Housing_EI_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Housing_Housing_EI \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "EI", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- HOUSING/EI -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Housing_Housing_EI \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Housing_Housing_EI \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Housing_Housing_HAUNF = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_housing = StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HAUNF;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Housing_Housing_HAUNF_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Housing_Housing_HAUNF_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_housing = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Housing_Housing_HAUNF_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Housing_Housing_HAUNF_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Housing_Housing_HAUNF \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "HAUNF", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- HOUSING/HAUNF -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Housing_Housing_HAUNF \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Housing_Housing_HAUNF \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Housing_Housing_A = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_housing = StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_A;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Housing_Housing_A_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Housing_Housing_A_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_housing = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Housing_Housing_A_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Housing_Housing_A_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Housing_Housing_A \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "A", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("Assembly step 1","Assembly step 2","Assembly step 3");
				console.log("----- HOUSING/A -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Housing_Housing_A \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Housing_Housing_A \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Housing_Housing_HA = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_housing = StateEnum.Production_ENUM_STATEMACHINE_HOUSING_HOUSING_HA;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Housing_Housing_HA_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Housing_Housing_HA_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_housing = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Housing_Housing_HA_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Housing_Housing_HA_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Housing_Housing_HA \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "HA", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- HOUSING/HA -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Housing_Housing_HA \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Housing_Housing_HA \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Magnet_MagnetFinal_106 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		
		var  state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_106);
		state.parent_state.decrementActiveCount();
		if (state.parent_state.isActiveState())
			this.base.deferInternalEvent(EventEnum.COMPLETION, null, state.parent_state);
		
		return true;
	};
	
	this.stateProc_StateMachine_Magnet_MagnetFinal_217 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		
		var  state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETFINAL_217);
		state.parent_state.decrementActiveCount();
		if (state.parent_state.isActiveState())
			this.base.deferInternalEvent(EventEnum.COMPLETION, null, state.parent_state);
		
		return true;
	};
	
	this.stateProc_StateMachine_Magnet_Magnet_S12 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_magnet = StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_S12;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Magnet_Magnet_S12_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Magnet_Magnet_S12_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_magnet = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Magnet_Magnet_S12_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Magnet_Magnet_S12_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Magnet_Magnet_S12 \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "S12", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- Magnet/S12  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Magnet_Magnet_S12 \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Magnet_Magnet_S12 \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Magnet_MagnetReading = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_magnet = StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNETREADING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Magnet_MagnetReading_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Magnet_MagnetReading_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_magnet = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Magnet_MagnetReading_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Magnet_MagnetReading_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Magnet_MagnetReading \12");
				switch (this.tokens[18]){
				case 'G24':
				this.guard = "Magnet_G24";
				break;
				case 'X12':
				this.guard = "Magnet_X12";
				break;
				case 'AMP24':
				this.guard = "Magnet_AMP24";
				break;
				case 'S12':
				this.guard = "Magnet_S12";
				break;
				default:
				this.guard = "Magnet_Final";
				break;
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Magnet_MagnetReading \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Magnet_MagnetReading \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Magnet_Magnet_AMP24 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_magnet = StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_AMP24;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Magnet_Magnet_AMP24_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Magnet_Magnet_AMP24_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_magnet = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Magnet_Magnet_AMP24_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Magnet_Magnet_AMP24_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Magnet_Magnet_AMP24 \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "AMP24", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- Magnet/AMP24  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Magnet_Magnet_AMP24 \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Magnet_Magnet_AMP24 \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Magnet_Magnet_G24 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_magnet = StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_G24;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Magnet_Magnet_G24_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Magnet_Magnet_G24_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_magnet = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Magnet_Magnet_G24_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Magnet_Magnet_G24_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Magnet_Magnet_G24 \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "G24", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- Magnet/G24  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Magnet_Magnet_G24 \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Magnet_Magnet_G24 \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_Magnet_Magnet_X12 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_magnet = StateEnum.Production_ENUM_STATEMACHINE_MAGNET_MAGNET_X12;
				state.incrementActiveCount();
				this.stateProc_StateMachine_Magnet_Magnet_X12_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_Magnet_Magnet_X12_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_magnet = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_Magnet_Magnet_X12_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_Magnet_Magnet_X12_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_Magnet_Magnet_X12 \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "X12", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- Magnet/X12  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_Magnet_Magnet_X12 \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_Magnet_Magnet_X12 \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringCover_SpringCoverFinal_87 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		
		var  state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_87);
		state.parent_state.decrementActiveCount();
		if (state.parent_state.isActiveState())
			this.base.deferInternalEvent(EventEnum.COMPLETION, null, state.parent_state);
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringCover_SpringCoverFinal_215 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		
		var  state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERFINAL_215);
		state.parent_state.decrementActiveCount();
		if (state.parent_state.isActiveState())
			this.base.deferInternalEvent(EventEnum.COMPLETION, null, state.parent_state);
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringCover_SpringCoverReading = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springcover = StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERREADING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCoverReading_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringCover_SpringCoverReading_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springcover = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCoverReading_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringCover_SpringCoverReading_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringCover_SpringCoverReading \12");
				switch(this.tokens[10]+this.tokens[11]+this.tokens[12]+this.tokens[13]+this.tokens[14]+this.tokens[15]+this.tokens[16]+this.tokens[17])
				{
				case 'EI':
				case 'EA':
				this.guard = "SpringCover_A";
				break;
				case 'EHA':
				case 'EAM':
				case 'EAM9':
				this.guard = "SpringCover_HA";
				break;
				case 'EHAUNF':
				case 'EAMUNF':
				case 'EAM9UNF':
				this.guard = "SpringCover_HAUNF";
				break;
				case 'E':
				this.guard = "SpringCover_E";
				break;
				case 'EWA':
				case 'EIWA':
				case 'EAWA':
				case 'EA9WA':
				this.guard = "SpringCover_WA";
				break;
				case 'ECAN':
				case 'E9CAN':
				case 'EICAN':
				case 'EI9CAN':
				case 'EHACAN':
				case 'EACAN':
				case 'EA9CAN':
				default:
				this.guard = "SpringCover_CAN";
				break;
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringCover_SpringCoverReading \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringCover_SpringCoverReading \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringCover_SpringCoverRoute = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springcover = StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVERROUTE;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCoverRoute_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringCover_SpringCoverRoute_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springcover = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCoverRoute_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringCover_SpringCoverRoute_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringCover_SpringCoverRoute \12");
				if (this.tokens[1] == 'L' ||
				this.tokens[1] == 'I' ||
				this.tokens[10] == 'E0' && this.tokens[17] == 'CAN')
				{
				this.guard = 'SpringCover_WV';
				} else if (this.tokens[10] == 'E' && this.tokens[13] == 'A')
				{
				this.guard = 'SpringCover_Controller';
				} else
				{
				this.guard = 'SpringCover_Magnet';
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringCover_SpringCoverRoute \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringCover_SpringCoverRoute \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringCover_SpringCover_A = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springcover = StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_A;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_A_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringCover_SpringCover_A_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springcover = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_A_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringCover_SpringCover_A_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringCover_SpringCover_A \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "A", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringCover/A -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringCover_SpringCover_A \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringCover_SpringCover_A \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringCover_SpringCover_CAN = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springcover = StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_CAN;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_CAN_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringCover_SpringCover_CAN_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springcover = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_CAN_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringCover_SpringCover_CAN_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringCover_SpringCover_CAN \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "CAN", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringCover/CAN -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringCover_SpringCover_CAN \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringCover_SpringCover_CAN \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringCover_SpringCover_E = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springcover = StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_E;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_E_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringCover_SpringCover_E_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springcover = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_E_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringCover_SpringCover_E_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringCover_SpringCover_E \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "E", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringCover/E -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringCover_SpringCover_E \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringCover_SpringCover_E \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringCover_SpringCover_HA = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springcover = StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HA;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_HA_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringCover_SpringCover_HA_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springcover = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_HA_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringCover_SpringCover_HA_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringCover_SpringCover_HA \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "HA", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData.actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringCover/HA -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringCover_SpringCover_HA \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringCover_SpringCover_HA \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringCover_SpringCover_HUNF = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springcover = StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_HUNF;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_HUNF_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringCover_SpringCover_HUNF_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springcover = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_HUNF_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringCover_SpringCover_HUNF_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringCover_SpringCover_HUNF \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "HUNF", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringCover/HUNF -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringCover_SpringCover_HUNF \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringCover_SpringCover_HUNF \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringCover_SpringCover_WA = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springcover = StateEnum.Production_ENUM_STATEMACHINE_SPRINGCOVER_SPRINGCOVER_WA;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_WA_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringCover_SpringCover_WA_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springcover = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringCover_SpringCover_WA_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringCover_SpringCover_WA_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringCover_SpringCover_WA \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "WA", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringCover/WA -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringCover_SpringCover_WA \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringCover_SpringCover_WA \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSet_SpringSetFinal_60 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		
		var  state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETFINAL_60);
		state.parent_state.decrementActiveCount();
		if (state.parent_state.isActiveState())
			this.base.deferInternalEvent(EventEnum.COMPLETION, null, state.parent_state);
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSet_SpringSetReading = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springset = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSETREADING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSet_SpringSetReading_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSet_SpringSetReading_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springset = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSet_SpringSetReading_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSet_SpringSetReading_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSet_SpringSetReading \12");
				switch(this.tokens[10]+this.tokens[11]+this.tokens[12]+this.tokens[13]+this.tokens[14]+this.tokens[15]+this.tokens[16]+this.tokens[17])
				{
				
				case 'E9':
				case 'E9CAN':
				case 'EHA':
				case 'EA9':
				case 'EA9CAN':
				this.guard = 'SpringSet_H';
				break;
				case 'ECAN':
				case 'ECANL':
				case 'EACAN':
				case 'EACANL':
				this.guard = 'SpringSet_CAN';
				break;
				case 'E':
				case 'EA':
				case 'EAG':
				default:
				this.guard = 'SpringSet_E';
				break;
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSet_SpringSetReading \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSet_SpringSetReading \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSet_SpringSet_A = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springset = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_A;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSet_SpringSet_A_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSet_SpringSet_A_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springset = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSet_SpringSet_A_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSet_SpringSet_A_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSet_SpringSet_A \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "A", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringSet/A -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSet_SpringSet_A \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSet_SpringSet_A \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSet_SpringSet_CAN = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springset = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_CAN;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSet_SpringSet_CAN_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSet_SpringSet_CAN_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springset = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSet_SpringSet_CAN_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSet_SpringSet_CAN_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSet_SpringSet_CAN \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "CAN", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringSet/CAN -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSet_SpringSet_CAN \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSet_SpringSet_CAN \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSet_SpringSet_E = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springset = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_E;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSet_SpringSet_E_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSet_SpringSet_E_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springset = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSet_SpringSet_E_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSet_SpringSet_E_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSet_SpringSet_E \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "E", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringSet/E -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSet_SpringSet_E \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSet_SpringSet_E \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSet_SpringSet_H = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springset = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSET_SPRINGSET_H;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSet_SpringSet_H_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSet_SpringSet_H_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springset = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSet_SpringSet_H_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSet_SpringSet_H_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSet_SpringSet_H \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList
				.push({"actionName": "H", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringSet/H -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSet_SpringSet_H \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSet_SpringSet_H \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewFinal_214 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		
		var  state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWFINAL_214);
		state.parent_state.decrementActiveCount();
		if (state.parent_state.isActiveState())
			this.base.deferInternalEvent(EventEnum.COMPLETION, null, state.parent_state);
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewRoute = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springsetscrew = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWROUTE;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewRoute_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewRoute_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springsetscrew = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewRoute_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewRoute_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSetScrew_SpringSetScrewRoute \12");
				if (this.tokens[1] == 'L' ||
				this.tokens[1] == 'I' ||
				this.tokens[10] == 'E' && this.tokens[13] == 'A' ||
				this.tokens[10] == 'E0' && this.tokens[17] == 'CAN'
				)
				{
				this.guard='SpringSetScrew_SpringCover';
				} else
				{
				this.guard='SpringSetScrew_WV';
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSetScrew_SpringSetScrewRoute \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSetScrew_SpringSetScrewRoute \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewReading = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springsetscrew = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREWREADING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewReading_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewReading_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springsetscrew = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewReading_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSetScrew_SpringSetScrewReading_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSetScrew_SpringSetScrewReading \12");
				switch(this.tokens[10]+this.tokens[11]+this.tokens[12]+this.tokens[13]+this.tokens[14]+this.tokens[15]+this.tokens[16]+this.tokens[17])
				{
				case 'EWA':
				case 'EHAWA':
				case 'EAWA':
				this.guard = 'SpringSetScrew_WA';
				break;
				case 'ECAN':
				case 'EHACAN':
				case 'EACAN':
				this.guard = 'SpringSetScrew_CAN';
				break;
				case 'ECANL':
				case 'EACANL':
				default:
				this.guard = 'SpringSetScrew_A';
				break;
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSetScrew_SpringSetScrewReading \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSetScrew_SpringSetScrewReading \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_A = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springsetscrew = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_A;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_A_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_A_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springsetscrew = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_A_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_A_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSetScrew_SpringSetScrew_A \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "A", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringSetScrew/A -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSetScrew_SpringSetScrew_A \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSetScrew_SpringSetScrew_A \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_CAN = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springsetscrew = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_CAN;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_CAN_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_CAN_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springsetscrew = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_CAN_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_CAN_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSetScrew_SpringSetScrew_CAN \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "CAN", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringSetScrew/CAN -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSetScrew_SpringSetScrew_CAN \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSetScrew_SpringSetScrew_CAN \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_WA = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_springsetscrew = StateEnum.Production_ENUM_STATEMACHINE_SPRINGSETSCREW_SPRINGSETSCREW_WA;
				state.incrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_WA_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_WA_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_springsetscrew = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_WA_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_SpringSetScrew_SpringSetScrew_WA_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_SpringSetScrew_SpringSetScrew_WA \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "WA", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- SpringSetScrew/WA -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_SpringSetScrew_SpringSetScrew_WA \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_SpringSetScrew_SpringSetScrew_WA \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_WV_WVFinal_218 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		
		var  state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WVFINAL_218);
		state.parent_state.decrementActiveCount();
		if (state.parent_state.isActiveState())
			this.base.deferInternalEvent(EventEnum.COMPLETION, null, state.parent_state);
		
		return true;
	};
	
	this.stateProc_StateMachine_WV_WVRoute = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_wv = StateEnum.Production_ENUM_STATEMACHINE_WV_WVROUTE;
				state.incrementActiveCount();
				this.stateProc_StateMachine_WV_WVRoute_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_WV_WVRoute_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_wv = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_WV_WVRoute_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_WV_WVRoute_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_WV_WVRoute \12");
				if (this.tokens[10] == 'E' && this.tokens[13] == 'A')
				{
				this.guard = "WV_Magnet";
				} else {
				this.guard = "WV_Controller";
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_WV_WVRoute \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_WV_WVRoute \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_WV_WVReading = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_wv = StateEnum.Production_ENUM_STATEMACHINE_WV_WVREADING;
				state.incrementActiveCount();
				this.stateProc_StateMachine_WV_WVReading_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_WV_WVReading_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_wv = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_WV_WVReading_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_WV_WVReading_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_WV_WVReading \12");
				if (this.tokens[1]=='81')
				{
				this.guard = "WV_Route";
				} else {
				switch(this.tokens[9])
				{
				case 'W1':
				this.guard = "WV_W1";
				break;
				case 'W3':
				console.log("Passa");
				this.guard = "WV_W3";
				break;
				default:
				this.guard = "WV_standard";
				break;
				}
				}
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_WV_WVReading \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_WV_WVReading \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_WV_WV_standard = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WV_STANDARD);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_wv = StateEnum.Production_ENUM_STATEMACHINE_WV_WV_STANDARD;
				state.incrementActiveCount();
				this.stateProc_StateMachine_WV_WV_standard_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_WV_WV_standard_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_wv = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_WV_WV_standard_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_WV_WV_standard_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_WV_WV_standard \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "standard", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- WV/-  -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_WV_WV_standard \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_WV_WV_standard \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_WV_WV_W1 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W1);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_wv = StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W1;
				state.incrementActiveCount();
				this.stateProc_StateMachine_WV_WV_W1_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_WV_WV_W1_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_wv = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_WV_WV_W1_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_WV_WV_W1_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_WV_WV_W1 \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "W1", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- WV/1 -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_WV_WV_W1 \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_WV_WV_W1 \12");
			break;
		}
		
		return true;
	};
	this.stateProc_StateMachine_WV_WV_W3 = function(behavior, submachineState, signal, enumEntryType, entryArray)
	{
		var state = this.base.getStateObject(submachineState, StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W3);
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
				if(state.active_count > 0)
					return false;
				this.m_statemachine_wv = StateEnum.Production_ENUM_STATEMACHINE_WV_WV_W3;
				state.incrementActiveCount();
				this.stateProc_StateMachine_WV_WV_W3_behavior(StateBehaviorEnum.ENTRY, signal);
				
				this.stateProc_StateMachine_WV_WV_W3_behavior(StateBehaviorEnum.DO, signal);
				if((enumEntryType == EntryTypeEnum.EntryPointEntry || enumEntryType == EntryTypeEnum.DefaultEntry) && state.isActiveState())
					this.base.deferInternalEvent(EventEnum.COMPLETION, null, state);
				break;
			case StateBehaviorEnum.EXIT:
				if(state.active_count == 0)
					return false;
				this.m_statemachine_wv = StateEnum.NOSTATE;
				state.decrementActiveCount();
				this.stateProc_StateMachine_WV_WV_W3_behavior(StateBehaviorEnum.EXIT, signal);
				this.base.removeInternalEvent(state);
				break;
		}
		
		return true;
	};
	
	this.stateProc_StateMachine_WV_WV_W3_behavior = function(behavior, signal) 
	{
		switch (behavior) 
		{
			case StateBehaviorEnum.ENTRY:
			trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Entry Behavior: StateMachine_WV_WV_W3 \12");
				// Pushing Action
				this.assemblyData[this.assemblyData.length-1].actionList.push({"actionName": "W3", "assemblySteps": []});
				
				// Pushing Assembly steps
				this.assemblyData[this.assemblyData.length-1]
				.actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1]
				.assemblySteps.push("assembly step 1","assembly step 2","assembly step 3");
				console.log("----- WV/3 -----");
				console.log("Assembly Action: "+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].actionName);
				console.log("Assembly Steps:");
				for(let i = 0; i < this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps.length; i++){
				console.log("\t"+this.assemblyData[this.assemblyData.length-1].actionList[this.assemblyData[this.assemblyData.length-1].actionList.length-1].assemblySteps[i]);
				}
				console.log("--------------------------");
			break;
			case StateBehaviorEnum.DO:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Do Behavior: StateMachine_WV_WV_W3 \12");
			break;
			case StateBehaviorEnum.EXIT:
				trace("[" + this.base.m_sInstanceName + ":" + this.base.m_sType + "] Exit Behavior: StateMachine_WV_WV_W3 \12");
			break;
		}
		
		return true;
	};
	this.initialize();
	/* End - EA generated code for StateMachine */

	this.assemblyData = null;
	this.guard = null;
	this.tokens = [];
	this.typeCode = null;
	this.typeCodeCheck = null;

}//end Production

